// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: rule_data.proto

package humanize_protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActuationRuleType int32

const (
	ActuationRuleType_RULE_TYPE_UNKNOWN                   ActuationRuleType = 0
	ActuationRuleType_RULE_TYPE_PROMPT_INSERT             ActuationRuleType = 1
	ActuationRuleType_RULE_TYPE_PROMPT_SWITCH             ActuationRuleType = 2
	ActuationRuleType_RULE_TYPE_INCREMENT_SYNONYM_COUNTER ActuationRuleType = 3
	ActuationRuleType_RULE_TYPE_DECREMENT_SYNONYM_COUNTER ActuationRuleType = 4
)

// Enum value maps for ActuationRuleType.
var (
	ActuationRuleType_name = map[int32]string{
		0: "RULE_TYPE_UNKNOWN",
		1: "RULE_TYPE_PROMPT_INSERT",
		2: "RULE_TYPE_PROMPT_SWITCH",
		3: "RULE_TYPE_INCREMENT_SYNONYM_COUNTER",
		4: "RULE_TYPE_DECREMENT_SYNONYM_COUNTER",
	}
	ActuationRuleType_value = map[string]int32{
		"RULE_TYPE_UNKNOWN":                   0,
		"RULE_TYPE_PROMPT_INSERT":             1,
		"RULE_TYPE_PROMPT_SWITCH":             2,
		"RULE_TYPE_INCREMENT_SYNONYM_COUNTER": 3,
		"RULE_TYPE_DECREMENT_SYNONYM_COUNTER": 4,
	}
)

func (x ActuationRuleType) Enum() *ActuationRuleType {
	p := new(ActuationRuleType)
	*p = x
	return p
}

func (x ActuationRuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActuationRuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[0].Descriptor()
}

func (ActuationRuleType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[0]
}

func (x ActuationRuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActuationRuleType.Descriptor instead.
func (ActuationRuleType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{0}
}

type PromptSegmentType int32

const (
	PromptSegmentType_PROMPT_SEGMENT_TYPE_UNKNOWN                      PromptSegmentType = 0
	PromptSegmentType_PROMPT_SEGMENT_TYPE_EMOTIONAL_PRIMER             PromptSegmentType = 1
	PromptSegmentType_PROMPT_SEGMENT_TYPE_MOTIVATIONAL_PRIMER          PromptSegmentType = 2
	PromptSegmentType_PROMPT_SEGMENT_TYPE_IDEOLOGY_PRIMER              PromptSegmentType = 3
	PromptSegmentType_PROMPT_SEGMENT_TYPE_KNOWLEDGE_GRAPH_NEEDS_PRIMER PromptSegmentType = 4
)

// Enum value maps for PromptSegmentType.
var (
	PromptSegmentType_name = map[int32]string{
		0: "PROMPT_SEGMENT_TYPE_UNKNOWN",
		1: "PROMPT_SEGMENT_TYPE_EMOTIONAL_PRIMER",
		2: "PROMPT_SEGMENT_TYPE_MOTIVATIONAL_PRIMER",
		3: "PROMPT_SEGMENT_TYPE_IDEOLOGY_PRIMER",
		4: "PROMPT_SEGMENT_TYPE_KNOWLEDGE_GRAPH_NEEDS_PRIMER",
	}
	PromptSegmentType_value = map[string]int32{
		"PROMPT_SEGMENT_TYPE_UNKNOWN":                      0,
		"PROMPT_SEGMENT_TYPE_EMOTIONAL_PRIMER":             1,
		"PROMPT_SEGMENT_TYPE_MOTIVATIONAL_PRIMER":          2,
		"PROMPT_SEGMENT_TYPE_IDEOLOGY_PRIMER":              3,
		"PROMPT_SEGMENT_TYPE_KNOWLEDGE_GRAPH_NEEDS_PRIMER": 4,
	}
)

func (x PromptSegmentType) Enum() *PromptSegmentType {
	p := new(PromptSegmentType)
	*p = x
	return p
}

func (x PromptSegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromptSegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[1].Descriptor()
}

func (PromptSegmentType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[1]
}

func (x PromptSegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromptSegmentType.Descriptor instead.
func (PromptSegmentType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{1}
}

type PromptType int32

const (
	PromptType_UNKNOWN     PromptType = 0
	PromptType_NAME_INSERT PromptType = 1
)

// Enum value maps for PromptType.
var (
	PromptType_name = map[int32]string{
		0: "UNKNOWN",
		1: "NAME_INSERT",
	}
	PromptType_value = map[string]int32{
		"UNKNOWN":     0,
		"NAME_INSERT": 1,
	}
)

func (x PromptType) Enum() *PromptType {
	p := new(PromptType)
	*p = x
	return p
}

func (x PromptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromptType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[2].Descriptor()
}

func (PromptType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[2]
}

func (x PromptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromptType.Descriptor instead.
func (PromptType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{2}
}

type RuleConditionType int32

const (
	RuleConditionType_RULE_CONDITION_TYPE_UNKNOWN RuleConditionType = 0
	RuleConditionType_IS_POSITIVE                 RuleConditionType = 1
	RuleConditionType_IS_NEGATIVE                 RuleConditionType = 2
	RuleConditionType_IS_POSITIVE_ABOVE_X_PERCENT RuleConditionType = 3
	RuleConditionType_IS_NEGATIVE_BELOW_X_PERCENT RuleConditionType = 5
	RuleConditionType_IS_ABOVE_X_PERCENT          RuleConditionType = 6
	RuleConditionType_IS_BELOW_X_PERCENT          RuleConditionType = 7
	RuleConditionType_WAS_PRECEDED_BY_NEGATIVE    RuleConditionType = 8
	RuleConditionType_WAS_PRECEDED_BY_POSITIVE    RuleConditionType = 9
)

// Enum value maps for RuleConditionType.
var (
	RuleConditionType_name = map[int32]string{
		0: "RULE_CONDITION_TYPE_UNKNOWN",
		1: "IS_POSITIVE",
		2: "IS_NEGATIVE",
		3: "IS_POSITIVE_ABOVE_X_PERCENT",
		5: "IS_NEGATIVE_BELOW_X_PERCENT",
		6: "IS_ABOVE_X_PERCENT",
		7: "IS_BELOW_X_PERCENT",
		8: "WAS_PRECEDED_BY_NEGATIVE",
		9: "WAS_PRECEDED_BY_POSITIVE",
	}
	RuleConditionType_value = map[string]int32{
		"RULE_CONDITION_TYPE_UNKNOWN": 0,
		"IS_POSITIVE":                 1,
		"IS_NEGATIVE":                 2,
		"IS_POSITIVE_ABOVE_X_PERCENT": 3,
		"IS_NEGATIVE_BELOW_X_PERCENT": 5,
		"IS_ABOVE_X_PERCENT":          6,
		"IS_BELOW_X_PERCENT":          7,
		"WAS_PRECEDED_BY_NEGATIVE":    8,
		"WAS_PRECEDED_BY_POSITIVE":    9,
	}
)

func (x RuleConditionType) Enum() *RuleConditionType {
	p := new(RuleConditionType)
	*p = x
	return p
}

func (x RuleConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[3].Descriptor()
}

func (RuleConditionType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[3]
}

func (x RuleConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleConditionType.Descriptor instead.
func (RuleConditionType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{3}
}

type RuleTickType int32

const (
	RuleTickType_RULE_TICK_UNKNOWN  RuleTickType = 0
	RuleTickType_RULE_TICK_POSITIVE RuleTickType = 1
	RuleTickType_RULE_TICK_NEGATIVE RuleTickType = 2
)

// Enum value maps for RuleTickType.
var (
	RuleTickType_name = map[int32]string{
		0: "RULE_TICK_UNKNOWN",
		1: "RULE_TICK_POSITIVE",
		2: "RULE_TICK_NEGATIVE",
	}
	RuleTickType_value = map[string]int32{
		"RULE_TICK_UNKNOWN":  0,
		"RULE_TICK_POSITIVE": 1,
		"RULE_TICK_NEGATIVE": 2,
	}
)

func (x RuleTickType) Enum() *RuleTickType {
	p := new(RuleTickType)
	*p = x
	return p
}

func (x RuleTickType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleTickType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[4].Descriptor()
}

func (RuleTickType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[4]
}

func (x RuleTickType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleTickType.Descriptor instead.
func (RuleTickType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{4}
}

type EmotionalBoundType int32

const (
	EmotionalBoundType_EMOTIONAL_BOUND_TYPE_UNKNOWN              EmotionalBoundType = 0
	EmotionalBoundType_EMOTIONAL_BOUND_TYPE_AGITATED_PATIENT     EmotionalBoundType = 1
	EmotionalBoundType_EMOTIONAL_BOUND_TYPE_SAD_HAPPY            EmotionalBoundType = 2
	EmotionalBoundType_EMOTIONAL_BOUND_TYPE_BURNED_OUT_AMBITIOUS EmotionalBoundType = 3
	EmotionalBoundType_EMOTIONAL_BOUND_TYPE_HATE_LOVE            EmotionalBoundType = 4
)

// Enum value maps for EmotionalBoundType.
var (
	EmotionalBoundType_name = map[int32]string{
		0: "EMOTIONAL_BOUND_TYPE_UNKNOWN",
		1: "EMOTIONAL_BOUND_TYPE_AGITATED_PATIENT",
		2: "EMOTIONAL_BOUND_TYPE_SAD_HAPPY",
		3: "EMOTIONAL_BOUND_TYPE_BURNED_OUT_AMBITIOUS",
		4: "EMOTIONAL_BOUND_TYPE_HATE_LOVE",
	}
	EmotionalBoundType_value = map[string]int32{
		"EMOTIONAL_BOUND_TYPE_UNKNOWN":              0,
		"EMOTIONAL_BOUND_TYPE_AGITATED_PATIENT":     1,
		"EMOTIONAL_BOUND_TYPE_SAD_HAPPY":            2,
		"EMOTIONAL_BOUND_TYPE_BURNED_OUT_AMBITIOUS": 3,
		"EMOTIONAL_BOUND_TYPE_HATE_LOVE":            4,
	}
)

func (x EmotionalBoundType) Enum() *EmotionalBoundType {
	p := new(EmotionalBoundType)
	*p = x
	return p
}

func (x EmotionalBoundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmotionalBoundType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[5].Descriptor()
}

func (EmotionalBoundType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[5]
}

func (x EmotionalBoundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmotionalBoundType.Descriptor instead.
func (EmotionalBoundType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{5}
}

type EmotionUpdateRule_BoundShiftType int32

const (
	EmotionUpdateRule_UNKNOWN         EmotionUpdateRule_BoundShiftType = 0
	EmotionUpdateRule_NEGATIVE_LOW    EmotionUpdateRule_BoundShiftType = 1
	EmotionUpdateRule_NEGATIVE_MEDIUM EmotionUpdateRule_BoundShiftType = 2
	EmotionUpdateRule_NEGATIVE_HIGH   EmotionUpdateRule_BoundShiftType = 4
	EmotionUpdateRule_POSITIVE_LOW    EmotionUpdateRule_BoundShiftType = 5
	EmotionUpdateRule_POSITIVE_MEDIUM EmotionUpdateRule_BoundShiftType = 6
	EmotionUpdateRule_POSITIVE_HIGH   EmotionUpdateRule_BoundShiftType = 7
)

// Enum value maps for EmotionUpdateRule_BoundShiftType.
var (
	EmotionUpdateRule_BoundShiftType_name = map[int32]string{
		0: "UNKNOWN",
		1: "NEGATIVE_LOW",
		2: "NEGATIVE_MEDIUM",
		4: "NEGATIVE_HIGH",
		5: "POSITIVE_LOW",
		6: "POSITIVE_MEDIUM",
		7: "POSITIVE_HIGH",
	}
	EmotionUpdateRule_BoundShiftType_value = map[string]int32{
		"UNKNOWN":         0,
		"NEGATIVE_LOW":    1,
		"NEGATIVE_MEDIUM": 2,
		"NEGATIVE_HIGH":   4,
		"POSITIVE_LOW":    5,
		"POSITIVE_MEDIUM": 6,
		"POSITIVE_HIGH":   7,
	}
)

func (x EmotionUpdateRule_BoundShiftType) Enum() *EmotionUpdateRule_BoundShiftType {
	p := new(EmotionUpdateRule_BoundShiftType)
	*p = x
	return p
}

func (x EmotionUpdateRule_BoundShiftType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmotionUpdateRule_BoundShiftType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[6].Descriptor()
}

func (EmotionUpdateRule_BoundShiftType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[6]
}

func (x EmotionUpdateRule_BoundShiftType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmotionUpdateRule_BoundShiftType.Descriptor instead.
func (EmotionUpdateRule_BoundShiftType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{0, 0}
}

type RulePart_RulePartType int32

const (
	RulePart_UNKNOWN                     RulePart_RulePartType = 0
	RulePart_IS_POSITIVE                 RulePart_RulePartType = 1
	RulePart_IS_NEGATIVE                 RulePart_RulePartType = 2
	RulePart_IS_POSITIVE_ABOVE_X_PERCENT RulePart_RulePartType = 3
	RulePart_IS_NEGATIVE_BELOW_X_PERCENT RulePart_RulePartType = 5
	RulePart_IS_ABOVE_X_PERCENT          RulePart_RulePartType = 6
	RulePart_IS_BELOW_X_PERCENT          RulePart_RulePartType = 7
	RulePart_WAS_PRECEDED_BY_NEGATIVE    RulePart_RulePartType = 8
	RulePart_WAS_PRECEDED_BY_POSITIVE    RulePart_RulePartType = 9
	RulePart_EMOTIONAL_SEQUENCE          RulePart_RulePartType = 10
)

// Enum value maps for RulePart_RulePartType.
var (
	RulePart_RulePartType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "IS_POSITIVE",
		2:  "IS_NEGATIVE",
		3:  "IS_POSITIVE_ABOVE_X_PERCENT",
		5:  "IS_NEGATIVE_BELOW_X_PERCENT",
		6:  "IS_ABOVE_X_PERCENT",
		7:  "IS_BELOW_X_PERCENT",
		8:  "WAS_PRECEDED_BY_NEGATIVE",
		9:  "WAS_PRECEDED_BY_POSITIVE",
		10: "EMOTIONAL_SEQUENCE",
	}
	RulePart_RulePartType_value = map[string]int32{
		"UNKNOWN":                     0,
		"IS_POSITIVE":                 1,
		"IS_NEGATIVE":                 2,
		"IS_POSITIVE_ABOVE_X_PERCENT": 3,
		"IS_NEGATIVE_BELOW_X_PERCENT": 5,
		"IS_ABOVE_X_PERCENT":          6,
		"IS_BELOW_X_PERCENT":          7,
		"WAS_PRECEDED_BY_NEGATIVE":    8,
		"WAS_PRECEDED_BY_POSITIVE":    9,
		"EMOTIONAL_SEQUENCE":          10,
	}
)

func (x RulePart_RulePartType) Enum() *RulePart_RulePartType {
	p := new(RulePart_RulePartType)
	*p = x
	return p
}

func (x RulePart_RulePartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RulePart_RulePartType) Descriptor() protoreflect.EnumDescriptor {
	return file_rule_data_proto_enumTypes[7].Descriptor()
}

func (RulePart_RulePartType) Type() protoreflect.EnumType {
	return &file_rule_data_proto_enumTypes[7]
}

func (x RulePart_RulePartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RulePart_RulePartType.Descriptor instead.
func (RulePart_RulePartType) EnumDescriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{1, 0}
}

type EmotionUpdateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId            string                                      `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Name              string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TriggeringAction  string                                      `protobuf:"bytes,3,opt,name=triggering_action,json=triggeringAction,proto3" json:"triggering_action,omitempty"`
	BoundShifts       map[string]EmotionUpdateRule_BoundShiftType `protobuf:"bytes,4,rep,name=bound_shifts,json=boundShifts,proto3" json:"bound_shifts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=rule_data.EmotionUpdateRule_BoundShiftType"`
	RuleParts         []*RulePart                                 `protobuf:"bytes,5,rep,name=rule_parts,json=ruleParts,proto3" json:"rule_parts,omitempty"`
	PercentageOfProc  int32                                       `protobuf:"varint,6,opt,name=percentage_of_proc,json=percentageOfProc,proto3" json:"percentage_of_proc,omitempty"`
	UsesComposure     bool                                        `protobuf:"varint,7,opt,name=uses_composure,json=usesComposure,proto3" json:"uses_composure,omitempty"`
	UsesLikeness      bool                                        `protobuf:"varint,8,opt,name=uses_likeness,json=usesLikeness,proto3" json:"uses_likeness,omitempty"`
	ResultingAction   string                                      `protobuf:"bytes,9,opt,name=resulting_action,json=resultingAction,proto3" json:"resulting_action,omitempty"`
	PersonalityId     string                                      `protobuf:"bytes,10,opt,name=personality_id,json=personalityId,proto3" json:"personality_id,omitempty"`
	EmotionMagnitudes map[string]EmotionShiftMagnitude            `protobuf:"bytes,11,rep,name=emotion_magnitudes,json=emotionMagnitudes,proto3" json:"emotion_magnitudes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=middleware.EmotionShiftMagnitude"`
}

func (x *EmotionUpdateRule) Reset() {
	*x = EmotionUpdateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmotionUpdateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionUpdateRule) ProtoMessage() {}

func (x *EmotionUpdateRule) ProtoReflect() protoreflect.Message {
	mi := &file_rule_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionUpdateRule.ProtoReflect.Descriptor instead.
func (*EmotionUpdateRule) Descriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{0}
}

func (x *EmotionUpdateRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *EmotionUpdateRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmotionUpdateRule) GetTriggeringAction() string {
	if x != nil {
		return x.TriggeringAction
	}
	return ""
}

func (x *EmotionUpdateRule) GetBoundShifts() map[string]EmotionUpdateRule_BoundShiftType {
	if x != nil {
		return x.BoundShifts
	}
	return nil
}

func (x *EmotionUpdateRule) GetRuleParts() []*RulePart {
	if x != nil {
		return x.RuleParts
	}
	return nil
}

func (x *EmotionUpdateRule) GetPercentageOfProc() int32 {
	if x != nil {
		return x.PercentageOfProc
	}
	return 0
}

func (x *EmotionUpdateRule) GetUsesComposure() bool {
	if x != nil {
		return x.UsesComposure
	}
	return false
}

func (x *EmotionUpdateRule) GetUsesLikeness() bool {
	if x != nil {
		return x.UsesLikeness
	}
	return false
}

func (x *EmotionUpdateRule) GetResultingAction() string {
	if x != nil {
		return x.ResultingAction
	}
	return ""
}

func (x *EmotionUpdateRule) GetPersonalityId() string {
	if x != nil {
		return x.PersonalityId
	}
	return ""
}

func (x *EmotionUpdateRule) GetEmotionMagnitudes() map[string]EmotionShiftMagnitude {
	if x != nil {
		return x.EmotionMagnitudes
	}
	return nil
}

type RulePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description              string                `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Type                     RulePart_RulePartType `protobuf:"varint,2,opt,name=type,proto3,enum=rule_data.RulePart_RulePartType" json:"type,omitempty"`
	PercentageOfProc         int32                 `protobuf:"varint,3,opt,name=percentage_of_proc,json=percentageOfProc,proto3" json:"percentage_of_proc,omitempty"`
	BoundId                  string                `protobuf:"bytes,4,opt,name=bound_id,json=boundId,proto3" json:"bound_id,omitempty"`
	BoundPercentage          int32                 `protobuf:"varint,5,opt,name=bound_percentage,json=boundPercentage,proto3" json:"bound_percentage,omitempty"`
	RulePartId               string                `protobuf:"bytes,6,opt,name=rule_part_id,json=rulePartId,proto3" json:"rule_part_id,omitempty"`
	RuleId                   string                `protobuf:"bytes,7,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	ConversationEmotionTrain []string              `protobuf:"bytes,8,rep,name=conversation_emotion_train,json=conversationEmotionTrain,proto3" json:"conversation_emotion_train,omitempty"`
}

func (x *RulePart) Reset() {
	*x = RulePart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulePart) ProtoMessage() {}

func (x *RulePart) ProtoReflect() protoreflect.Message {
	mi := &file_rule_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulePart.ProtoReflect.Descriptor instead.
func (*RulePart) Descriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{1}
}

func (x *RulePart) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RulePart) GetType() RulePart_RulePartType {
	if x != nil {
		return x.Type
	}
	return RulePart_UNKNOWN
}

func (x *RulePart) GetPercentageOfProc() int32 {
	if x != nil {
		return x.PercentageOfProc
	}
	return 0
}

func (x *RulePart) GetBoundId() string {
	if x != nil {
		return x.BoundId
	}
	return ""
}

func (x *RulePart) GetBoundPercentage() int32 {
	if x != nil {
		return x.BoundPercentage
	}
	return 0
}

func (x *RulePart) GetRulePartId() string {
	if x != nil {
		return x.RulePartId
	}
	return ""
}

func (x *RulePart) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RulePart) GetConversationEmotionTrain() []string {
	if x != nil {
		return x.ConversationEmotionTrain
	}
	return nil
}

type ActuationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ActuationRuleType `protobuf:"varint,1,opt,name=type,proto3,enum=rule_data.ActuationRuleType" json:"type,omitempty"`
	ActuationRuleId string            `protobuf:"bytes,2,opt,name=actuation_rule_id,json=actuationRuleId,proto3" json:"actuation_rule_id,omitempty"`
	PersonalityId   string            `protobuf:"bytes,3,opt,name=personality_id,json=personalityId,proto3" json:"personality_id,omitempty"`
	RuleParts       []*RulePart       `protobuf:"bytes,4,rep,name=rule_parts,json=ruleParts,proto3" json:"rule_parts,omitempty"`
	// Deprecated: Do not use.
	ResultingPromptId string `protobuf:"bytes,5,opt,name=resulting_prompt_id,json=resultingPromptId,proto3" json:"resulting_prompt_id,omitempty"`
	// Deprecated: Do not use.
	ResultingPromptSegmentId string           `protobuf:"bytes,6,opt,name=resulting_prompt_segment_id,json=resultingPromptSegmentId,proto3" json:"resulting_prompt_segment_id,omitempty"`
	IdealEmotionalState      *EmotionalState  `protobuf:"bytes,7,opt,name=ideal_emotional_state,json=idealEmotionalState,proto3" json:"ideal_emotional_state,omitempty"`
	PercentageOfProc         int32            `protobuf:"varint,8,opt,name=percentage_of_proc,json=percentageOfProc,proto3" json:"percentage_of_proc,omitempty"`
	BoundTickAcuations       []*BoundRuleTick `protobuf:"bytes,9,rep,name=bound_tick_acuations,json=boundTickAcuations,proto3" json:"bound_tick_acuations,omitempty"`
	RuleName                 string           `protobuf:"bytes,10,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
}

func (x *ActuationRule) Reset() {
	*x = ActuationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActuationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActuationRule) ProtoMessage() {}

func (x *ActuationRule) ProtoReflect() protoreflect.Message {
	mi := &file_rule_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActuationRule.ProtoReflect.Descriptor instead.
func (*ActuationRule) Descriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{2}
}

func (x *ActuationRule) GetType() ActuationRuleType {
	if x != nil {
		return x.Type
	}
	return ActuationRuleType_RULE_TYPE_UNKNOWN
}

func (x *ActuationRule) GetActuationRuleId() string {
	if x != nil {
		return x.ActuationRuleId
	}
	return ""
}

func (x *ActuationRule) GetPersonalityId() string {
	if x != nil {
		return x.PersonalityId
	}
	return ""
}

func (x *ActuationRule) GetRuleParts() []*RulePart {
	if x != nil {
		return x.RuleParts
	}
	return nil
}

// Deprecated: Do not use.
func (x *ActuationRule) GetResultingPromptId() string {
	if x != nil {
		return x.ResultingPromptId
	}
	return ""
}

// Deprecated: Do not use.
func (x *ActuationRule) GetResultingPromptSegmentId() string {
	if x != nil {
		return x.ResultingPromptSegmentId
	}
	return ""
}

func (x *ActuationRule) GetIdealEmotionalState() *EmotionalState {
	if x != nil {
		return x.IdealEmotionalState
	}
	return nil
}

func (x *ActuationRule) GetPercentageOfProc() int32 {
	if x != nil {
		return x.PercentageOfProc
	}
	return 0
}

func (x *ActuationRule) GetBoundTickAcuations() []*BoundRuleTick {
	if x != nil {
		return x.BoundTickAcuations
	}
	return nil
}

func (x *ActuationRule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

type Prompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptId                        string              `protobuf:"bytes,1,opt,name=prompt_id,json=promptId,proto3" json:"prompt_id,omitempty"`
	PromptName                      string              `protobuf:"bytes,2,opt,name=prompt_name,json=promptName,proto3" json:"prompt_name,omitempty"`
	PromptType                      PromptType          `protobuf:"varint,3,opt,name=prompt_type,json=promptType,proto3,enum=rule_data.PromptType" json:"prompt_type,omitempty"`
	PromptText                      string              `protobuf:"bytes,4,opt,name=prompt_text,json=promptText,proto3" json:"prompt_text,omitempty"`
	PromptSetId                     string              `protobuf:"bytes,5,opt,name=prompt_set_id,json=promptSetId,proto3" json:"prompt_set_id,omitempty"`
	IdealEmotionalState             *EmotionalState     `protobuf:"bytes,6,opt,name=ideal_emotional_state,json=idealEmotionalState,proto3" json:"ideal_emotional_state,omitempty"`
	RuleParts                       []*RulePart         `protobuf:"bytes,7,rep,name=rule_parts,json=ruleParts,proto3" json:"rule_parts,omitempty"`
	EmotionalStateSquaredDifference float32             `protobuf:"fixed32,8,opt,name=emotional_state_squared_difference,json=emotionalStateSquaredDifference,proto3" json:"emotional_state_squared_difference,omitempty"`
	RequiredPromptSegmentTypes      []PromptSegmentType `protobuf:"varint,9,rep,packed,name=required_prompt_segment_types,json=requiredPromptSegmentTypes,proto3,enum=rule_data.PromptSegmentType" json:"required_prompt_segment_types,omitempty"`
}

func (x *Prompt) Reset() {
	*x = Prompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prompt) ProtoMessage() {}

func (x *Prompt) ProtoReflect() protoreflect.Message {
	mi := &file_rule_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prompt.ProtoReflect.Descriptor instead.
func (*Prompt) Descriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{3}
}

func (x *Prompt) GetPromptId() string {
	if x != nil {
		return x.PromptId
	}
	return ""
}

func (x *Prompt) GetPromptName() string {
	if x != nil {
		return x.PromptName
	}
	return ""
}

func (x *Prompt) GetPromptType() PromptType {
	if x != nil {
		return x.PromptType
	}
	return PromptType_UNKNOWN
}

func (x *Prompt) GetPromptText() string {
	if x != nil {
		return x.PromptText
	}
	return ""
}

func (x *Prompt) GetPromptSetId() string {
	if x != nil {
		return x.PromptSetId
	}
	return ""
}

func (x *Prompt) GetIdealEmotionalState() *EmotionalState {
	if x != nil {
		return x.IdealEmotionalState
	}
	return nil
}

func (x *Prompt) GetRuleParts() []*RulePart {
	if x != nil {
		return x.RuleParts
	}
	return nil
}

func (x *Prompt) GetEmotionalStateSquaredDifference() float32 {
	if x != nil {
		return x.EmotionalStateSquaredDifference
	}
	return 0
}

func (x *Prompt) GetRequiredPromptSegmentTypes() []PromptSegmentType {
	if x != nil {
		return x.RequiredPromptSegmentTypes
	}
	return nil
}

type PromptSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptSegmentId                 string            `protobuf:"bytes,1,opt,name=prompt_segment_id,json=promptSegmentId,proto3" json:"prompt_segment_id,omitempty"`
	PromptSegmentSetId              string            `protobuf:"bytes,2,opt,name=prompt_segment_set_id,json=promptSegmentSetId,proto3" json:"prompt_segment_set_id,omitempty"`
	Type                            PromptSegmentType `protobuf:"varint,3,opt,name=type,proto3,enum=rule_data.PromptSegmentType" json:"type,omitempty"`
	IdealEmotionalState             *EmotionalState   `protobuf:"bytes,4,opt,name=ideal_emotional_state,json=idealEmotionalState,proto3" json:"ideal_emotional_state,omitempty"`
	RuleParts                       []*RulePart       `protobuf:"bytes,5,rep,name=rule_parts,json=ruleParts,proto3" json:"rule_parts,omitempty"`
	Message                         string            `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	PercentageOfProc                int32             `protobuf:"varint,7,opt,name=percentage_of_proc,json=percentageOfProc,proto3" json:"percentage_of_proc,omitempty"`
	EmotionalStateSquaredDifference float32           `protobuf:"fixed32,8,opt,name=emotional_state_squared_difference,json=emotionalStateSquaredDifference,proto3" json:"emotional_state_squared_difference,omitempty"`
}

func (x *PromptSegment) Reset() {
	*x = PromptSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptSegment) ProtoMessage() {}

func (x *PromptSegment) ProtoReflect() protoreflect.Message {
	mi := &file_rule_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptSegment.ProtoReflect.Descriptor instead.
func (*PromptSegment) Descriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{4}
}

func (x *PromptSegment) GetPromptSegmentId() string {
	if x != nil {
		return x.PromptSegmentId
	}
	return ""
}

func (x *PromptSegment) GetPromptSegmentSetId() string {
	if x != nil {
		return x.PromptSegmentSetId
	}
	return ""
}

func (x *PromptSegment) GetType() PromptSegmentType {
	if x != nil {
		return x.Type
	}
	return PromptSegmentType_PROMPT_SEGMENT_TYPE_UNKNOWN
}

func (x *PromptSegment) GetIdealEmotionalState() *EmotionalState {
	if x != nil {
		return x.IdealEmotionalState
	}
	return nil
}

func (x *PromptSegment) GetRuleParts() []*RulePart {
	if x != nil {
		return x.RuleParts
	}
	return nil
}

func (x *PromptSegment) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PromptSegment) GetPercentageOfProc() int32 {
	if x != nil {
		return x.PercentageOfProc
	}
	return 0
}

func (x *PromptSegment) GetEmotionalStateSquaredDifference() float32 {
	if x != nil {
		return x.EmotionalStateSquaredDifference
	}
	return 0
}

type BoundRuleTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoundType EmotionalBoundType `protobuf:"varint,1,opt,name=bound_type,json=boundType,proto3,enum=rule_data.EmotionalBoundType" json:"bound_type,omitempty"`
	Action    RuleTickType       `protobuf:"varint,2,opt,name=action,proto3,enum=rule_data.RuleTickType" json:"action,omitempty"`
}

func (x *BoundRuleTick) Reset() {
	*x = BoundRuleTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundRuleTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundRuleTick) ProtoMessage() {}

func (x *BoundRuleTick) ProtoReflect() protoreflect.Message {
	mi := &file_rule_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundRuleTick.ProtoReflect.Descriptor instead.
func (*BoundRuleTick) Descriptor() ([]byte, []int) {
	return file_rule_data_proto_rawDescGZIP(), []int{5}
}

func (x *BoundRuleTick) GetBoundType() EmotionalBoundType {
	if x != nil {
		return x.BoundType
	}
	return EmotionalBoundType_EMOTIONAL_BOUND_TYPE_UNKNOWN
}

func (x *BoundRuleTick) GetAction() RuleTickType {
	if x != nil {
		return x.Action
	}
	return RuleTickType_RULE_TICK_UNKNOWN
}

var File_rule_data_proto protoreflect.FileDescriptor

var file_rule_data_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d,
	0x07, 0x0a, 0x11, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x50, 0x72,
	0x6f, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x62, 0x0a, 0x12, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x73, 0x1a, 0x6b, 0x0a, 0x10, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x67, 0x0a, 0x16, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x07, 0x22, 0xd5,
	0x04, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x50, 0x72, 0x6f,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x22, 0x83, 0x02, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x58,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53,
	0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x08,
	0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x0a, 0x22, 0xa6, 0x04, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x61,
	0x6c, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4f, 0x66, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x4a, 0x0a, 0x14, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x12,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xf5, 0x03, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x09,
	0x72, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb9, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x69, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4f, 0x66, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x4b, 0x0a, 0x22, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x7e, 0x0a, 0x0d, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2a, 0xb6, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50,
	0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x59, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x4f, 0x4e,
	0x59, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x04, 0x2a, 0xea, 0x01, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x2b, 0x0a,
	0x27, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52,
	0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x45, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4c,
	0x45, 0x44, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53,
	0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x2a, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x53,
	0x45, 0x52, 0x54, 0x10, 0x01, 0x2a, 0x84, 0x02, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x42,
	0x4f, 0x56, 0x45, 0x5f, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42,
	0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x58, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x5f, 0x42,
	0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x07,
	0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x1c,
	0x0a, 0x18, 0x57, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09, 0x2a, 0x55, 0x0a, 0x0c,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x2a, 0xd8, 0x01, 0x0a, 0x12, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x49, 0x54, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41,
	0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x45,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x41,
	0x4d, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x10, 0x04, 0x42, 0x14,
	0x5a, 0x12, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rule_data_proto_rawDescOnce sync.Once
	file_rule_data_proto_rawDescData = file_rule_data_proto_rawDesc
)

func file_rule_data_proto_rawDescGZIP() []byte {
	file_rule_data_proto_rawDescOnce.Do(func() {
		file_rule_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_rule_data_proto_rawDescData)
	})
	return file_rule_data_proto_rawDescData
}

var file_rule_data_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_rule_data_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_rule_data_proto_goTypes = []interface{}{
	(ActuationRuleType)(0),                // 0: rule_data.ActuationRuleType
	(PromptSegmentType)(0),                // 1: rule_data.PromptSegmentType
	(PromptType)(0),                       // 2: rule_data.PromptType
	(RuleConditionType)(0),                // 3: rule_data.RuleConditionType
	(RuleTickType)(0),                     // 4: rule_data.RuleTickType
	(EmotionalBoundType)(0),               // 5: rule_data.EmotionalBoundType
	(EmotionUpdateRule_BoundShiftType)(0), // 6: rule_data.EmotionUpdateRule.BoundShiftType
	(RulePart_RulePartType)(0),            // 7: rule_data.RulePart.RulePartType
	(*EmotionUpdateRule)(nil),             // 8: rule_data.EmotionUpdateRule
	(*RulePart)(nil),                      // 9: rule_data.RulePart
	(*ActuationRule)(nil),                 // 10: rule_data.ActuationRule
	(*Prompt)(nil),                        // 11: rule_data.Prompt
	(*PromptSegment)(nil),                 // 12: rule_data.PromptSegment
	(*BoundRuleTick)(nil),                 // 13: rule_data.BoundRuleTick
	nil,                                   // 14: rule_data.EmotionUpdateRule.BoundShiftsEntry
	nil,                                   // 15: rule_data.EmotionUpdateRule.EmotionMagnitudesEntry
	(*EmotionalState)(nil),                // 16: middleware.EmotionalState
	(EmotionShiftMagnitude)(0),            // 17: middleware.EmotionShiftMagnitude
}
var file_rule_data_proto_depIdxs = []int32{
	14, // 0: rule_data.EmotionUpdateRule.bound_shifts:type_name -> rule_data.EmotionUpdateRule.BoundShiftsEntry
	9,  // 1: rule_data.EmotionUpdateRule.rule_parts:type_name -> rule_data.RulePart
	15, // 2: rule_data.EmotionUpdateRule.emotion_magnitudes:type_name -> rule_data.EmotionUpdateRule.EmotionMagnitudesEntry
	7,  // 3: rule_data.RulePart.type:type_name -> rule_data.RulePart.RulePartType
	0,  // 4: rule_data.ActuationRule.type:type_name -> rule_data.ActuationRuleType
	9,  // 5: rule_data.ActuationRule.rule_parts:type_name -> rule_data.RulePart
	16, // 6: rule_data.ActuationRule.ideal_emotional_state:type_name -> middleware.EmotionalState
	13, // 7: rule_data.ActuationRule.bound_tick_acuations:type_name -> rule_data.BoundRuleTick
	2,  // 8: rule_data.Prompt.prompt_type:type_name -> rule_data.PromptType
	16, // 9: rule_data.Prompt.ideal_emotional_state:type_name -> middleware.EmotionalState
	9,  // 10: rule_data.Prompt.rule_parts:type_name -> rule_data.RulePart
	1,  // 11: rule_data.Prompt.required_prompt_segment_types:type_name -> rule_data.PromptSegmentType
	1,  // 12: rule_data.PromptSegment.type:type_name -> rule_data.PromptSegmentType
	16, // 13: rule_data.PromptSegment.ideal_emotional_state:type_name -> middleware.EmotionalState
	9,  // 14: rule_data.PromptSegment.rule_parts:type_name -> rule_data.RulePart
	5,  // 15: rule_data.BoundRuleTick.bound_type:type_name -> rule_data.EmotionalBoundType
	4,  // 16: rule_data.BoundRuleTick.action:type_name -> rule_data.RuleTickType
	6,  // 17: rule_data.EmotionUpdateRule.BoundShiftsEntry.value:type_name -> rule_data.EmotionUpdateRule.BoundShiftType
	17, // 18: rule_data.EmotionUpdateRule.EmotionMagnitudesEntry.value:type_name -> middleware.EmotionShiftMagnitude
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_rule_data_proto_init() }
func file_rule_data_proto_init() {
	if File_rule_data_proto != nil {
		return
	}
	file_middleware_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rule_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmotionUpdateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RulePart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActuationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundRuleTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rule_data_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rule_data_proto_goTypes,
		DependencyIndexes: file_rule_data_proto_depIdxs,
		EnumInfos:         file_rule_data_proto_enumTypes,
		MessageInfos:      file_rule_data_proto_msgTypes,
	}.Build()
	File_rule_data_proto = out.File
	file_rule_data_proto_rawDesc = nil
	file_rule_data_proto_goTypes = nil
	file_rule_data_proto_depIdxs = nil
}
