// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: middleware.proto

package humanize_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectClient is the client API for Connect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectClient interface {
	Connect(ctx context.Context, in *MiddleWareConnectReq, opts ...grpc.CallOption) (*MiddleWareConnectResp, error)
	SendText(ctx context.Context, in *SendTextRequest, opts ...grpc.CallOption) (*GetConversationInformationResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	GetConversationInformation(ctx context.Context, in *GetConversationInformationRequest, opts ...grpc.CallOption) (*GetConversationInformationResponse, error)
}

type connectClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectClient(cc grpc.ClientConnInterface) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) Connect(ctx context.Context, in *MiddleWareConnectReq, opts ...grpc.CallOption) (*MiddleWareConnectResp, error) {
	out := new(MiddleWareConnectResp)
	err := c.cc.Invoke(ctx, "/middleware.Connect/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) SendText(ctx context.Context, in *SendTextRequest, opts ...grpc.CallOption) (*GetConversationInformationResponse, error) {
	out := new(GetConversationInformationResponse)
	err := c.cc.Invoke(ctx, "/middleware.Connect/SendText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/middleware.Connect/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) GetConversationInformation(ctx context.Context, in *GetConversationInformationRequest, opts ...grpc.CallOption) (*GetConversationInformationResponse, error) {
	out := new(GetConversationInformationResponse)
	err := c.cc.Invoke(ctx, "/middleware.Connect/GetConversationInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectServer is the server API for Connect service.
// All implementations must embed UnimplementedConnectServer
// for forward compatibility
type ConnectServer interface {
	Connect(context.Context, *MiddleWareConnectReq) (*MiddleWareConnectResp, error)
	SendText(context.Context, *SendTextRequest) (*GetConversationInformationResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	GetConversationInformation(context.Context, *GetConversationInformationRequest) (*GetConversationInformationResponse, error)
	mustEmbedUnimplementedConnectServer()
}

// UnimplementedConnectServer must be embedded to have forward compatible implementations.
type UnimplementedConnectServer struct {
}

func (UnimplementedConnectServer) Connect(context.Context, *MiddleWareConnectReq) (*MiddleWareConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedConnectServer) SendText(context.Context, *SendTextRequest) (*GetConversationInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendText not implemented")
}
func (UnimplementedConnectServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedConnectServer) GetConversationInformation(context.Context, *GetConversationInformationRequest) (*GetConversationInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationInformation not implemented")
}
func (UnimplementedConnectServer) mustEmbedUnimplementedConnectServer() {}

// UnsafeConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServer will
// result in compilation errors.
type UnsafeConnectServer interface {
	mustEmbedUnimplementedConnectServer()
}

func RegisterConnectServer(s grpc.ServiceRegistrar, srv ConnectServer) {
	s.RegisterService(&Connect_ServiceDesc, srv)
}

func _Connect_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiddleWareConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleware.Connect/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Connect(ctx, req.(*MiddleWareConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_SendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).SendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleware.Connect/SendText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).SendText(ctx, req.(*SendTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleware.Connect/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_GetConversationInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).GetConversationInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleware.Connect/GetConversationInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).GetConversationInformation(ctx, req.(*GetConversationInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Connect_ServiceDesc is the grpc.ServiceDesc for Connect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "middleware.Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Connect_Connect_Handler,
		},
		{
			MethodName: "SendText",
			Handler:    _Connect_SendText_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Connect_Commit_Handler,
		},
		{
			MethodName: "GetConversationInformation",
			Handler:    _Connect_GetConversationInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middleware.proto",
}
