// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: humanize.proto

package humanize_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HumanizeClient is the client API for Humanize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HumanizeClient interface {
	Connect(ctx context.Context, in *HumanizeConnectReq, opts ...grpc.CallOption) (*HumanizeConnectResp, error)
	SendRequest(ctx context.Context, in *HumanizeRequest, opts ...grpc.CallOption) (*HumanizeResponse, error)
}

type humanizeClient struct {
	cc grpc.ClientConnInterface
}

func NewHumanizeClient(cc grpc.ClientConnInterface) HumanizeClient {
	return &humanizeClient{cc}
}

func (c *humanizeClient) Connect(ctx context.Context, in *HumanizeConnectReq, opts ...grpc.CallOption) (*HumanizeConnectResp, error) {
	out := new(HumanizeConnectResp)
	err := c.cc.Invoke(ctx, "/humanize.Humanize/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanizeClient) SendRequest(ctx context.Context, in *HumanizeRequest, opts ...grpc.CallOption) (*HumanizeResponse, error) {
	out := new(HumanizeResponse)
	err := c.cc.Invoke(ctx, "/humanize.Humanize/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HumanizeServer is the server API for Humanize service.
// All implementations must embed UnimplementedHumanizeServer
// for forward compatibility
type HumanizeServer interface {
	Connect(context.Context, *HumanizeConnectReq) (*HumanizeConnectResp, error)
	SendRequest(context.Context, *HumanizeRequest) (*HumanizeResponse, error)
	mustEmbedUnimplementedHumanizeServer()
}

// UnimplementedHumanizeServer must be embedded to have forward compatible implementations.
type UnimplementedHumanizeServer struct {
}

func (UnimplementedHumanizeServer) Connect(context.Context, *HumanizeConnectReq) (*HumanizeConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedHumanizeServer) SendRequest(context.Context, *HumanizeRequest) (*HumanizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedHumanizeServer) mustEmbedUnimplementedHumanizeServer() {}

// UnsafeHumanizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HumanizeServer will
// result in compilation errors.
type UnsafeHumanizeServer interface {
	mustEmbedUnimplementedHumanizeServer()
}

func RegisterHumanizeServer(s grpc.ServiceRegistrar, srv HumanizeServer) {
	s.RegisterService(&Humanize_ServiceDesc, srv)
}

func _Humanize_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanizeConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanizeServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/humanize.Humanize/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanizeServer).Connect(ctx, req.(*HumanizeConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Humanize_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanizeServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/humanize.Humanize/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanizeServer).SendRequest(ctx, req.(*HumanizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Humanize_ServiceDesc is the grpc.ServiceDesc for Humanize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Humanize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "humanize.Humanize",
	HandlerType: (*HumanizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Humanize_Connect_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _Humanize_SendRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "humanize.proto",
}
