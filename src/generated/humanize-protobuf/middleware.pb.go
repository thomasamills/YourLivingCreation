// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: middleware.proto

package humanize_protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmotionShiftMagnitude int32

const (
	EmotionShiftMagnitude_UNKNOWN     EmotionShiftMagnitude = 0
	EmotionShiftMagnitude_BOTTLING_UP EmotionShiftMagnitude = 1
	EmotionShiftMagnitude_NEUTRAL     EmotionShiftMagnitude = 2
	EmotionShiftMagnitude_SHORT_FUSE  EmotionShiftMagnitude = 3
)

// Enum value maps for EmotionShiftMagnitude.
var (
	EmotionShiftMagnitude_name = map[int32]string{
		0: "UNKNOWN",
		1: "BOTTLING_UP",
		2: "NEUTRAL",
		3: "SHORT_FUSE",
	}
	EmotionShiftMagnitude_value = map[string]int32{
		"UNKNOWN":     0,
		"BOTTLING_UP": 1,
		"NEUTRAL":     2,
		"SHORT_FUSE":  3,
	}
)

func (x EmotionShiftMagnitude) Enum() *EmotionShiftMagnitude {
	p := new(EmotionShiftMagnitude)
	*p = x
	return p
}

func (x EmotionShiftMagnitude) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmotionShiftMagnitude) Descriptor() protoreflect.EnumDescriptor {
	return file_middleware_proto_enumTypes[0].Descriptor()
}

func (EmotionShiftMagnitude) Type() protoreflect.EnumType {
	return &file_middleware_proto_enumTypes[0]
}

func (x EmotionShiftMagnitude) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmotionShiftMagnitude.Descriptor instead.
func (EmotionShiftMagnitude) EnumDescriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{0}
}

type CommitRequest_Type int32

const (
	CommitRequest_COMMIT_TYPE_UNKNOWN CommitRequest_Type = 0
	CommitRequest_COMMIT_TYPE_ACCEPT  CommitRequest_Type = 1
	CommitRequest_COMMIT_TYPE_REJECT  CommitRequest_Type = 2
)

// Enum value maps for CommitRequest_Type.
var (
	CommitRequest_Type_name = map[int32]string{
		0: "COMMIT_TYPE_UNKNOWN",
		1: "COMMIT_TYPE_ACCEPT",
		2: "COMMIT_TYPE_REJECT",
	}
	CommitRequest_Type_value = map[string]int32{
		"COMMIT_TYPE_UNKNOWN": 0,
		"COMMIT_TYPE_ACCEPT":  1,
		"COMMIT_TYPE_REJECT":  2,
	}
)

func (x CommitRequest_Type) Enum() *CommitRequest_Type {
	p := new(CommitRequest_Type)
	*p = x
	return p
}

func (x CommitRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_middleware_proto_enumTypes[1].Descriptor()
}

func (CommitRequest_Type) Type() protoreflect.EnumType {
	return &file_middleware_proto_enumTypes[1]
}

func (x CommitRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitRequest_Type.Descriptor instead.
func (CommitRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{0, 0}
}

type CommitResponse_ResponseOutcome int32

const (
	CommitResponse_COMMIT_OUTCOME_UNKNOWN    CommitResponse_ResponseOutcome = 0
	CommitResponse_COMMIT_OUTCOME_SUCCESSFUL CommitResponse_ResponseOutcome = 1
	CommitResponse_COMMIT_OUTCOME_FAILED     CommitResponse_ResponseOutcome = 2
)

// Enum value maps for CommitResponse_ResponseOutcome.
var (
	CommitResponse_ResponseOutcome_name = map[int32]string{
		0: "COMMIT_OUTCOME_UNKNOWN",
		1: "COMMIT_OUTCOME_SUCCESSFUL",
		2: "COMMIT_OUTCOME_FAILED",
	}
	CommitResponse_ResponseOutcome_value = map[string]int32{
		"COMMIT_OUTCOME_UNKNOWN":    0,
		"COMMIT_OUTCOME_SUCCESSFUL": 1,
		"COMMIT_OUTCOME_FAILED":     2,
	}
)

func (x CommitResponse_ResponseOutcome) Enum() *CommitResponse_ResponseOutcome {
	p := new(CommitResponse_ResponseOutcome)
	*p = x
	return p
}

func (x CommitResponse_ResponseOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitResponse_ResponseOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_middleware_proto_enumTypes[2].Descriptor()
}

func (CommitResponse_ResponseOutcome) Type() protoreflect.EnumType {
	return &file_middleware_proto_enumTypes[2]
}

func (x CommitResponse_ResponseOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitResponse_ResponseOutcome.Descriptor instead.
func (CommitResponse_ResponseOutcome) EnumDescriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{1, 0}
}

type MiddleWareConnectResp_ConnectionStatus int32

const (
	MiddleWareConnectResp_UNKNOWN   MiddleWareConnectResp_ConnectionStatus = 0
	MiddleWareConnectResp_CONNECTED MiddleWareConnectResp_ConnectionStatus = 1
	MiddleWareConnectResp_FAILED    MiddleWareConnectResp_ConnectionStatus = 2
)

// Enum value maps for MiddleWareConnectResp_ConnectionStatus.
var (
	MiddleWareConnectResp_ConnectionStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONNECTED",
		2: "FAILED",
	}
	MiddleWareConnectResp_ConnectionStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"CONNECTED": 1,
		"FAILED":    2,
	}
)

func (x MiddleWareConnectResp_ConnectionStatus) Enum() *MiddleWareConnectResp_ConnectionStatus {
	p := new(MiddleWareConnectResp_ConnectionStatus)
	*p = x
	return p
}

func (x MiddleWareConnectResp_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiddleWareConnectResp_ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_middleware_proto_enumTypes[3].Descriptor()
}

func (MiddleWareConnectResp_ConnectionStatus) Type() protoreflect.EnumType {
	return &file_middleware_proto_enumTypes[3]
}

func (x MiddleWareConnectResp_ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MiddleWareConnectResp_ConnectionStatus.Descriptor instead.
func (MiddleWareConnectResp_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{4, 0}
}

type GetConversationInformationResponse_ConnectionStatus int32

const (
	GetConversationInformationResponse_UNKNOWN GetConversationInformationResponse_ConnectionStatus = 0
	GetConversationInformationResponse_FAILED  GetConversationInformationResponse_ConnectionStatus = 1
	GetConversationInformationResponse_SUCCESS GetConversationInformationResponse_ConnectionStatus = 2
)

// Enum value maps for GetConversationInformationResponse_ConnectionStatus.
var (
	GetConversationInformationResponse_ConnectionStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "FAILED",
		2: "SUCCESS",
	}
	GetConversationInformationResponse_ConnectionStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"FAILED":  1,
		"SUCCESS": 2,
	}
)

func (x GetConversationInformationResponse_ConnectionStatus) Enum() *GetConversationInformationResponse_ConnectionStatus {
	p := new(GetConversationInformationResponse_ConnectionStatus)
	*p = x
	return p
}

func (x GetConversationInformationResponse_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetConversationInformationResponse_ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_middleware_proto_enumTypes[4].Descriptor()
}

func (GetConversationInformationResponse_ConnectionStatus) Type() protoreflect.EnumType {
	return &file_middleware_proto_enumTypes[4]
}

func (x GetConversationInformationResponse_ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetConversationInformationResponse_ConnectionStatus.Descriptor instead.
func (GetConversationInformationResponse_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{8, 0}
}

type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string             `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	MessageId  string             `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	CommitType CommitRequest_Type `protobuf:"varint,3,opt,name=commit_type,json=commitType,proto3,enum=middleware.CommitRequest_Type" json:"commit_type,omitempty"`
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{0}
}

func (x *CommitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CommitRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *CommitRequest) GetCommitType() CommitRequest_Type {
	if x != nil {
		return x.CommitType
	}
	return CommitRequest_COMMIT_TYPE_UNKNOWN
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome             CommitResponse_ResponseOutcome `protobuf:"varint,1,opt,name=outcome,proto3,enum=middleware.CommitResponse_ResponseOutcome" json:"outcome,omitempty"`
	MessageResponseData *MessageResponseData           `protobuf:"bytes,2,opt,name=message_response_data,json=messageResponseData,proto3" json:"message_response_data,omitempty"`
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{1}
}

func (x *CommitResponse) GetOutcome() CommitResponse_ResponseOutcome {
	if x != nil {
		return x.Outcome
	}
	return CommitResponse_COMMIT_OUTCOME_UNKNOWN
}

func (x *CommitResponse) GetMessageResponseData() *MessageResponseData {
	if x != nil {
		return x.MessageResponseData
	}
	return nil
}

type NpcRequestInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PromptSetId                 string `protobuf:"bytes,2,opt,name=prompt_set_id,json=promptSetId,proto3" json:"prompt_set_id,omitempty"`
	PromptSegmentSetId          string `protobuf:"bytes,3,opt,name=prompt_segment_set_id,json=promptSegmentSetId,proto3" json:"prompt_segment_set_id,omitempty"`
	DefaultPromptId             string `protobuf:"bytes,4,opt,name=default_prompt_id,json=defaultPromptId,proto3" json:"default_prompt_id,omitempty"`
	PresetEmotionalStateId      string `protobuf:"bytes,5,opt,name=preset_emotional_state_id,json=presetEmotionalStateId,proto3" json:"preset_emotional_state_id,omitempty"`
	PersonalityId               string `protobuf:"bytes,6,opt,name=personality_id,json=personalityId,proto3" json:"personality_id,omitempty"`
	ActuationRuleSetId          string `protobuf:"bytes,7,opt,name=actuation_rule_set_id,json=actuationRuleSetId,proto3" json:"actuation_rule_set_id,omitempty"`
	GenConfigId                 string `protobuf:"bytes,8,opt,name=gen_config_id,json=genConfigId,proto3" json:"gen_config_id,omitempty"`
	ActuationPromptSetId        string `protobuf:"bytes,9,opt,name=actuation_prompt_set_id,json=actuationPromptSetId,proto3" json:"actuation_prompt_set_id,omitempty"`
	ActuationPromptSegmentSetId string `protobuf:"bytes,10,opt,name=actuation_prompt_segment_set_id,json=actuationPromptSegmentSetId,proto3" json:"actuation_prompt_segment_set_id,omitempty"`
}

func (x *NpcRequestInformation) Reset() {
	*x = NpcRequestInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcRequestInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcRequestInformation) ProtoMessage() {}

func (x *NpcRequestInformation) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcRequestInformation.ProtoReflect.Descriptor instead.
func (*NpcRequestInformation) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{2}
}

func (x *NpcRequestInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NpcRequestInformation) GetPromptSetId() string {
	if x != nil {
		return x.PromptSetId
	}
	return ""
}

func (x *NpcRequestInformation) GetPromptSegmentSetId() string {
	if x != nil {
		return x.PromptSegmentSetId
	}
	return ""
}

func (x *NpcRequestInformation) GetDefaultPromptId() string {
	if x != nil {
		return x.DefaultPromptId
	}
	return ""
}

func (x *NpcRequestInformation) GetPresetEmotionalStateId() string {
	if x != nil {
		return x.PresetEmotionalStateId
	}
	return ""
}

func (x *NpcRequestInformation) GetPersonalityId() string {
	if x != nil {
		return x.PersonalityId
	}
	return ""
}

func (x *NpcRequestInformation) GetActuationRuleSetId() string {
	if x != nil {
		return x.ActuationRuleSetId
	}
	return ""
}

func (x *NpcRequestInformation) GetGenConfigId() string {
	if x != nil {
		return x.GenConfigId
	}
	return ""
}

func (x *NpcRequestInformation) GetActuationPromptSetId() string {
	if x != nil {
		return x.ActuationPromptSetId
	}
	return ""
}

func (x *NpcRequestInformation) GetActuationPromptSegmentSetId() string {
	if x != nil {
		return x.ActuationPromptSegmentSetId
	}
	return ""
}

type MiddleWareConnectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerName                             string                   `protobuf:"bytes,1,opt,name=speaker_name,json=speakerName,proto3" json:"speaker_name,omitempty"`
	NpcInformation                          []*NpcRequestInformation `protobuf:"bytes,2,rep,name=npc_information,json=npcInformation,proto3" json:"npc_information,omitempty"`
	StartAsyncGameLoop                      bool                     `protobuf:"varint,3,opt,name=start_async_game_loop,json=startAsyncGameLoop,proto3" json:"start_async_game_loop,omitempty"`
	WaitForCommitMessageBeforeUpdatingState bool                     `protobuf:"varint,4,opt,name=wait_for_commit_message_before_updating_state,json=waitForCommitMessageBeforeUpdatingState,proto3" json:"wait_for_commit_message_before_updating_state,omitempty"`
	StartNarrative                          bool                     `protobuf:"varint,5,opt,name=start_narrative,json=startNarrative,proto3" json:"start_narrative,omitempty"`
}

func (x *MiddleWareConnectReq) Reset() {
	*x = MiddleWareConnectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddleWareConnectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddleWareConnectReq) ProtoMessage() {}

func (x *MiddleWareConnectReq) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddleWareConnectReq.ProtoReflect.Descriptor instead.
func (*MiddleWareConnectReq) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{3}
}

func (x *MiddleWareConnectReq) GetSpeakerName() string {
	if x != nil {
		return x.SpeakerName
	}
	return ""
}

func (x *MiddleWareConnectReq) GetNpcInformation() []*NpcRequestInformation {
	if x != nil {
		return x.NpcInformation
	}
	return nil
}

func (x *MiddleWareConnectReq) GetStartAsyncGameLoop() bool {
	if x != nil {
		return x.StartAsyncGameLoop
	}
	return false
}

func (x *MiddleWareConnectReq) GetWaitForCommitMessageBeforeUpdatingState() bool {
	if x != nil {
		return x.WaitForCommitMessageBeforeUpdatingState
	}
	return false
}

func (x *MiddleWareConnectReq) GetStartNarrative() bool {
	if x != nil {
		return x.StartNarrative
	}
	return false
}

type MiddleWareConnectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	SpeakerNameId string `protobuf:"bytes,2,opt,name=speakerNameId,proto3" json:"speakerNameId,omitempty"`
	// id to initial states
	NpcEmotional_States map[string]*EmotionalState             `protobuf:"bytes,3,rep,name=npc_emotional_States,json=npcEmotionalStates,proto3" json:"npc_emotional_States,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status              MiddleWareConnectResp_ConnectionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=middleware.MiddleWareConnectResp_ConnectionStatus" json:"status,omitempty"`
	ErrorMessage        string                                 `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	NpcNameToId         map[string]string                      `protobuf:"bytes,6,rep,name=npc_name_to_id,json=npcNameToId,proto3" json:"npc_name_to_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MiddleWareConnectResp) Reset() {
	*x = MiddleWareConnectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddleWareConnectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddleWareConnectResp) ProtoMessage() {}

func (x *MiddleWareConnectResp) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddleWareConnectResp.ProtoReflect.Descriptor instead.
func (*MiddleWareConnectResp) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{4}
}

func (x *MiddleWareConnectResp) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MiddleWareConnectResp) GetSpeakerNameId() string {
	if x != nil {
		return x.SpeakerNameId
	}
	return ""
}

func (x *MiddleWareConnectResp) GetNpcEmotional_States() map[string]*EmotionalState {
	if x != nil {
		return x.NpcEmotional_States
	}
	return nil
}

func (x *MiddleWareConnectResp) GetStatus() MiddleWareConnectResp_ConnectionStatus {
	if x != nil {
		return x.Status
	}
	return MiddleWareConnectResp_UNKNOWN
}

func (x *MiddleWareConnectResp) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MiddleWareConnectResp) GetNpcNameToId() map[string]string {
	if x != nil {
		return x.NpcNameToId
	}
	return nil
}

type SendTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId        string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Message          string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IsAction         bool   `protobuf:"varint,3,opt,name=is_action,json=isAction,proto3" json:"is_action,omitempty"`
	DirectedEntityId string `protobuf:"bytes,4,opt,name=directed_entity_id,json=directedEntityId,proto3" json:"directed_entity_id,omitempty"`
	AdditionalJson   string `protobuf:"bytes,5,opt,name=additional_json,json=additionalJson,proto3" json:"additional_json,omitempty"`
}

func (x *SendTextRequest) Reset() {
	*x = SendTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextRequest) ProtoMessage() {}

func (x *SendTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextRequest.ProtoReflect.Descriptor instead.
func (*SendTextRequest) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{5}
}

func (x *SendTextRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendTextRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendTextRequest) GetIsAction() bool {
	if x != nil {
		return x.IsAction
	}
	return false
}

func (x *SendTextRequest) GetDirectedEntityId() string {
	if x != nil {
		return x.DirectedEntityId
	}
	return ""
}

func (x *SendTextRequest) GetAdditionalJson() string {
	if x != nil {
		return x.AdditionalJson
	}
	return ""
}

type GetConversationInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *GetConversationInformationRequest) Reset() {
	*x = GetConversationInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationInformationRequest) ProtoMessage() {}

func (x *GetConversationInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationInformationRequest.ProtoReflect.Descriptor instead.
func (*GetConversationInformationRequest) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{6}
}

func (x *GetConversationInformationRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type MessageResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated emotional states
	Message                       string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Response                      string          `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	AskerEmotion                  string          `protobuf:"bytes,3,opt,name=asker_emotion,json=askerEmotion,proto3" json:"asker_emotion,omitempty"`
	ResponderEmotion              string          `protobuf:"bytes,4,opt,name=responder_emotion,json=responderEmotion,proto3" json:"responder_emotion,omitempty"`
	AskerName                     string          `protobuf:"bytes,5,opt,name=asker_name,json=askerName,proto3" json:"asker_name,omitempty"`
	AskerId                       string          `protobuf:"bytes,6,opt,name=asker_id,json=askerId,proto3" json:"asker_id,omitempty"`
	AskerTriggeredAction          string          `protobuf:"bytes,7,opt,name=asker_triggered_action,json=askerTriggeredAction,proto3" json:"asker_triggered_action,omitempty"`
	ResponderName                 string          `protobuf:"bytes,8,opt,name=responder_name,json=responderName,proto3" json:"responder_name,omitempty"`
	ResponderId                   string          `protobuf:"bytes,9,opt,name=responder_id,json=responderId,proto3" json:"responder_id,omitempty"`
	ResponderTriggeredEmotion     string          `protobuf:"bytes,10,opt,name=responder_triggered_emotion,json=responderTriggeredEmotion,proto3" json:"responder_triggered_emotion,omitempty"`
	AskerEmotionalStateUpdate     *EmotionalState `protobuf:"bytes,11,opt,name=asker_emotional_state_update,json=askerEmotionalStateUpdate,proto3" json:"asker_emotional_state_update,omitempty"`
	ResponderEmotionalStateUpdate *EmotionalState `protobuf:"bytes,12,opt,name=responder_emotional_state_update,json=responderEmotionalStateUpdate,proto3" json:"responder_emotional_state_update,omitempty"`
	AskerAcceptsAction            bool            `protobuf:"varint,13,opt,name=asker_accepts_action,json=askerAcceptsAction,proto3" json:"asker_accepts_action,omitempty"`
	ResponderAcceptsAction        bool            `protobuf:"varint,14,opt,name=responder_accepts_action,json=responderAcceptsAction,proto3" json:"responder_accepts_action,omitempty"`
	CommitToken                   string          `protobuf:"bytes,15,opt,name=commit_token,json=commitToken,proto3" json:"commit_token,omitempty"`
}

func (x *MessageResponseData) Reset() {
	*x = MessageResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResponseData) ProtoMessage() {}

func (x *MessageResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResponseData.ProtoReflect.Descriptor instead.
func (*MessageResponseData) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{7}
}

func (x *MessageResponseData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageResponseData) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *MessageResponseData) GetAskerEmotion() string {
	if x != nil {
		return x.AskerEmotion
	}
	return ""
}

func (x *MessageResponseData) GetResponderEmotion() string {
	if x != nil {
		return x.ResponderEmotion
	}
	return ""
}

func (x *MessageResponseData) GetAskerName() string {
	if x != nil {
		return x.AskerName
	}
	return ""
}

func (x *MessageResponseData) GetAskerId() string {
	if x != nil {
		return x.AskerId
	}
	return ""
}

func (x *MessageResponseData) GetAskerTriggeredAction() string {
	if x != nil {
		return x.AskerTriggeredAction
	}
	return ""
}

func (x *MessageResponseData) GetResponderName() string {
	if x != nil {
		return x.ResponderName
	}
	return ""
}

func (x *MessageResponseData) GetResponderId() string {
	if x != nil {
		return x.ResponderId
	}
	return ""
}

func (x *MessageResponseData) GetResponderTriggeredEmotion() string {
	if x != nil {
		return x.ResponderTriggeredEmotion
	}
	return ""
}

func (x *MessageResponseData) GetAskerEmotionalStateUpdate() *EmotionalState {
	if x != nil {
		return x.AskerEmotionalStateUpdate
	}
	return nil
}

func (x *MessageResponseData) GetResponderEmotionalStateUpdate() *EmotionalState {
	if x != nil {
		return x.ResponderEmotionalStateUpdate
	}
	return nil
}

func (x *MessageResponseData) GetAskerAcceptsAction() bool {
	if x != nil {
		return x.AskerAcceptsAction
	}
	return false
}

func (x *MessageResponseData) GetResponderAcceptsAction() bool {
	if x != nil {
		return x.ResponderAcceptsAction
	}
	return false
}

func (x *MessageResponseData) GetCommitToken() string {
	if x != nil {
		return x.CommitToken
	}
	return ""
}

type GetConversationInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// key: entity id
	MessageResponseData map[string]*MessageResponseData                     `protobuf:"bytes,3,rep,name=message_response_data,json=messageResponseData,proto3" json:"message_response_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status              GetConversationInformationResponse_ConnectionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=middleware.GetConversationInformationResponse_ConnectionStatus" json:"status,omitempty"`
	ErrorMessage        string                                              `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *GetConversationInformationResponse) Reset() {
	*x = GetConversationInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationInformationResponse) ProtoMessage() {}

func (x *GetConversationInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationInformationResponse.ProtoReflect.Descriptor instead.
func (*GetConversationInformationResponse) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{8}
}

func (x *GetConversationInformationResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetConversationInformationResponse) GetMessageResponseData() map[string]*MessageResponseData {
	if x != nil {
		return x.MessageResponseData
	}
	return nil
}

func (x *GetConversationInformationResponse) GetStatus() GetConversationInformationResponse_ConnectionStatus {
	if x != nil {
		return x.Status
	}
	return GetConversationInformationResponse_UNKNOWN
}

func (x *GetConversationInformationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type EmotionalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId        string                     `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	PersonalityId   string                     `protobuf:"bytes,2,opt,name=personality_id,json=personalityId,proto3" json:"personality_id,omitempty"`
	Composure       int32                      `protobuf:"varint,3,opt,name=composure,proto3" json:"composure,omitempty"`
	Likeness        int32                      `protobuf:"varint,4,opt,name=likeness,proto3" json:"likeness,omitempty"`
	EmotionalBounds map[string]*EmotionalBound `protobuf:"bytes,5,rep,name=emotional_bounds,json=emotionalBounds,proto3" json:"emotional_bounds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Fears           []string                   `protobuf:"bytes,6,rep,name=fears,proto3" json:"fears,omitempty"`
	Hobbies         []string                   `protobuf:"bytes,7,rep,name=hobbies,proto3" json:"hobbies,omitempty"`
	IsPreset        bool                       `protobuf:"varint,8,opt,name=is_preset,json=isPreset,proto3" json:"is_preset,omitempty"`
}

func (x *EmotionalState) Reset() {
	*x = EmotionalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmotionalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionalState) ProtoMessage() {}

func (x *EmotionalState) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionalState.ProtoReflect.Descriptor instead.
func (*EmotionalState) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{9}
}

func (x *EmotionalState) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EmotionalState) GetPersonalityId() string {
	if x != nil {
		return x.PersonalityId
	}
	return ""
}

func (x *EmotionalState) GetComposure() int32 {
	if x != nil {
		return x.Composure
	}
	return 0
}

func (x *EmotionalState) GetLikeness() int32 {
	if x != nil {
		return x.Likeness
	}
	return 0
}

func (x *EmotionalState) GetEmotionalBounds() map[string]*EmotionalBound {
	if x != nil {
		return x.EmotionalBounds
	}
	return nil
}

func (x *EmotionalState) GetFears() []string {
	if x != nil {
		return x.Fears
	}
	return nil
}

func (x *EmotionalState) GetHobbies() []string {
	if x != nil {
		return x.Hobbies
	}
	return nil
}

func (x *EmotionalState) GetIsPreset() bool {
	if x != nil {
		return x.IsPreset
	}
	return false
}

type EmotionalBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId              string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	BoundInstanceId       string                 `protobuf:"bytes,2,opt,name=bound_instance_id,json=boundInstanceId,proto3" json:"bound_instance_id,omitempty"`
	BoundId               string                 `protobuf:"bytes,3,opt,name=bound_id,json=boundId,proto3" json:"bound_id,omitempty"`
	CurrentPercentage     int32                  `protobuf:"varint,4,opt,name=current_percentage,json=currentPercentage,proto3" json:"current_percentage,omitempty"`
	UpperBound            string                 `protobuf:"bytes,5,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	LowerBound            string                 `protobuf:"bytes,6,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	Synonyms              map[int32]*SynonymList `protobuf:"bytes,7,rep,name=synonyms,proto3" json:"synonyms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EmotionShiftMagnitude EmotionShiftMagnitude  `protobuf:"varint,8,opt,name=emotion_shift_magnitude,json=emotionShiftMagnitude,proto3,enum=middleware.EmotionShiftMagnitude" json:"emotion_shift_magnitude,omitempty"`
}

func (x *EmotionalBound) Reset() {
	*x = EmotionalBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmotionalBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionalBound) ProtoMessage() {}

func (x *EmotionalBound) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionalBound.ProtoReflect.Descriptor instead.
func (*EmotionalBound) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{10}
}

func (x *EmotionalBound) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EmotionalBound) GetBoundInstanceId() string {
	if x != nil {
		return x.BoundInstanceId
	}
	return ""
}

func (x *EmotionalBound) GetBoundId() string {
	if x != nil {
		return x.BoundId
	}
	return ""
}

func (x *EmotionalBound) GetCurrentPercentage() int32 {
	if x != nil {
		return x.CurrentPercentage
	}
	return 0
}

func (x *EmotionalBound) GetUpperBound() string {
	if x != nil {
		return x.UpperBound
	}
	return ""
}

func (x *EmotionalBound) GetLowerBound() string {
	if x != nil {
		return x.LowerBound
	}
	return ""
}

func (x *EmotionalBound) GetSynonyms() map[int32]*SynonymList {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *EmotionalBound) GetEmotionShiftMagnitude() EmotionShiftMagnitude {
	if x != nil {
		return x.EmotionShiftMagnitude
	}
	return EmotionShiftMagnitude_UNKNOWN
}

type SynonymList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Synonyms []string `protobuf:"bytes,1,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
}

func (x *SynonymList) Reset() {
	*x = SynonymList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_middleware_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynonymList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynonymList) ProtoMessage() {}

func (x *SynonymList) ProtoReflect() protoreflect.Message {
	mi := &file_middleware_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynonymList.ProtoReflect.Descriptor instead.
func (*SynonymList) Descriptor() ([]byte, []int) {
	return file_middleware_proto_rawDescGZIP(), []int{11}
}

func (x *SynonymList) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

var File_middleware_proto protoreflect.FileDescriptor

var file_middleware_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x22, 0xdf,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x4f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02,
	0x22, 0x94, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x67,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43,
	0x4f, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0xe4, 0x03, 0x0a, 0x15, 0x4e, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xc1,
	0x02, 0x0a, 0x14, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x57, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6e, 0x70,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x4e, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6e, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x5e, 0x0a, 0x2d, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x27, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xf0, 0x04, 0x0a, 0x15, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x57, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x6b, 0x0a, 0x14, 0x6e, 0x70, 0x63, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x57, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x4e, 0x70, 0x63, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x70, 0x63, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x57, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a,
	0x0e, 0x6e, 0x70, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x57, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4e, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x70, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x17, 0x4e, 0x70, 0x63, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4e, 0x70, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe8, 0x05, 0x0a, 0x13, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x73, 0x6b, 0x65, 0x72, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x72, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73,
	0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x1c, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x19, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x45, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x63, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xdf, 0x03, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x67, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0x97, 0x03, 0x0a, 0x0e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x6b, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69,
	0x6b, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x65, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x65, 0x61, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x1a,
	0x5e, 0x0a, 0x14, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xdc, 0x03, 0x0a, 0x0e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x59, 0x0a,
	0x17, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x6d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x52, 0x15, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x1a, 0x54, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29,
	0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x2a, 0x52, 0x0a, 0x15, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x55, 0x53, 0x45, 0x10, 0x03, 0x32, 0xf0, 0x02,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x57, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x57, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x14, 0x5a, 0x12, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_middleware_proto_rawDescOnce sync.Once
	file_middleware_proto_rawDescData = file_middleware_proto_rawDesc
)

func file_middleware_proto_rawDescGZIP() []byte {
	file_middleware_proto_rawDescOnce.Do(func() {
		file_middleware_proto_rawDescData = protoimpl.X.CompressGZIP(file_middleware_proto_rawDescData)
	})
	return file_middleware_proto_rawDescData
}

var file_middleware_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_middleware_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_middleware_proto_goTypes = []interface{}{
	(EmotionShiftMagnitude)(0),                               // 0: middleware.EmotionShiftMagnitude
	(CommitRequest_Type)(0),                                  // 1: middleware.CommitRequest.Type
	(CommitResponse_ResponseOutcome)(0),                      // 2: middleware.CommitResponse.ResponseOutcome
	(MiddleWareConnectResp_ConnectionStatus)(0),              // 3: middleware.MiddleWareConnectResp.ConnectionStatus
	(GetConversationInformationResponse_ConnectionStatus)(0), // 4: middleware.GetConversationInformationResponse.ConnectionStatus
	(*CommitRequest)(nil),                                    // 5: middleware.CommitRequest
	(*CommitResponse)(nil),                                   // 6: middleware.CommitResponse
	(*NpcRequestInformation)(nil),                            // 7: middleware.NpcRequestInformation
	(*MiddleWareConnectReq)(nil),                             // 8: middleware.MiddleWareConnectReq
	(*MiddleWareConnectResp)(nil),                            // 9: middleware.MiddleWareConnectResp
	(*SendTextRequest)(nil),                                  // 10: middleware.SendTextRequest
	(*GetConversationInformationRequest)(nil),                // 11: middleware.GetConversationInformationRequest
	(*MessageResponseData)(nil),                              // 12: middleware.MessageResponseData
	(*GetConversationInformationResponse)(nil),               // 13: middleware.GetConversationInformationResponse
	(*EmotionalState)(nil),                                   // 14: middleware.EmotionalState
	(*EmotionalBound)(nil),                                   // 15: middleware.EmotionalBound
	(*SynonymList)(nil),                                      // 16: middleware.SynonymList
	nil,                                                      // 17: middleware.MiddleWareConnectResp.NpcEmotionalStatesEntry
	nil,                                                      // 18: middleware.MiddleWareConnectResp.NpcNameToIdEntry
	nil,                                                      // 19: middleware.GetConversationInformationResponse.MessageResponseDataEntry
	nil,                                                      // 20: middleware.EmotionalState.EmotionalBoundsEntry
	nil,                                                      // 21: middleware.EmotionalBound.SynonymsEntry
}
var file_middleware_proto_depIdxs = []int32{
	1,  // 0: middleware.CommitRequest.commit_type:type_name -> middleware.CommitRequest.Type
	2,  // 1: middleware.CommitResponse.outcome:type_name -> middleware.CommitResponse.ResponseOutcome
	12, // 2: middleware.CommitResponse.message_response_data:type_name -> middleware.MessageResponseData
	7,  // 3: middleware.MiddleWareConnectReq.npc_information:type_name -> middleware.NpcRequestInformation
	17, // 4: middleware.MiddleWareConnectResp.npc_emotional_States:type_name -> middleware.MiddleWareConnectResp.NpcEmotionalStatesEntry
	3,  // 5: middleware.MiddleWareConnectResp.status:type_name -> middleware.MiddleWareConnectResp.ConnectionStatus
	18, // 6: middleware.MiddleWareConnectResp.npc_name_to_id:type_name -> middleware.MiddleWareConnectResp.NpcNameToIdEntry
	14, // 7: middleware.MessageResponseData.asker_emotional_state_update:type_name -> middleware.EmotionalState
	14, // 8: middleware.MessageResponseData.responder_emotional_state_update:type_name -> middleware.EmotionalState
	19, // 9: middleware.GetConversationInformationResponse.message_response_data:type_name -> middleware.GetConversationInformationResponse.MessageResponseDataEntry
	4,  // 10: middleware.GetConversationInformationResponse.status:type_name -> middleware.GetConversationInformationResponse.ConnectionStatus
	20, // 11: middleware.EmotionalState.emotional_bounds:type_name -> middleware.EmotionalState.EmotionalBoundsEntry
	21, // 12: middleware.EmotionalBound.synonyms:type_name -> middleware.EmotionalBound.SynonymsEntry
	0,  // 13: middleware.EmotionalBound.emotion_shift_magnitude:type_name -> middleware.EmotionShiftMagnitude
	14, // 14: middleware.MiddleWareConnectResp.NpcEmotionalStatesEntry.value:type_name -> middleware.EmotionalState
	12, // 15: middleware.GetConversationInformationResponse.MessageResponseDataEntry.value:type_name -> middleware.MessageResponseData
	15, // 16: middleware.EmotionalState.EmotionalBoundsEntry.value:type_name -> middleware.EmotionalBound
	16, // 17: middleware.EmotionalBound.SynonymsEntry.value:type_name -> middleware.SynonymList
	8,  // 18: middleware.Connect.Connect:input_type -> middleware.MiddleWareConnectReq
	10, // 19: middleware.Connect.SendText:input_type -> middleware.SendTextRequest
	5,  // 20: middleware.Connect.Commit:input_type -> middleware.CommitRequest
	11, // 21: middleware.Connect.GetConversationInformation:input_type -> middleware.GetConversationInformationRequest
	9,  // 22: middleware.Connect.Connect:output_type -> middleware.MiddleWareConnectResp
	13, // 23: middleware.Connect.SendText:output_type -> middleware.GetConversationInformationResponse
	6,  // 24: middleware.Connect.Commit:output_type -> middleware.CommitResponse
	13, // 25: middleware.Connect.GetConversationInformation:output_type -> middleware.GetConversationInformationResponse
	22, // [22:26] is the sub-list for method output_type
	18, // [18:22] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_middleware_proto_init() }
func file_middleware_proto_init() {
	if File_middleware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_middleware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcRequestInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddleWareConnectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddleWareConnectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmotionalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmotionalBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_middleware_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynonymList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_middleware_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_middleware_proto_goTypes,
		DependencyIndexes: file_middleware_proto_depIdxs,
		EnumInfos:         file_middleware_proto_enumTypes,
		MessageInfos:      file_middleware_proto_msgTypes,
	}.Build()
	File_middleware_proto = out.File
	file_middleware_proto_rawDesc = nil
	file_middleware_proto_goTypes = nil
	file_middleware_proto_depIdxs = nil
}
