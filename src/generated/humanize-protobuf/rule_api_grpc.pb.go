// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: rule_api.proto

package humanize_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuleApiClient is the client API for RuleApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleApiClient interface {
	// Listing (gives ids only, no need to read entire database)
	ListGenerationConfigs(ctx context.Context, in *ListGenerationConfigRequest, opts ...grpc.CallOption) (*ListGenerationConfigResponse, error)
	ListPersonalityIds(ctx context.Context, in *ListPersonalityIdsRequest, opts ...grpc.CallOption) (*ListPersonalityIdsResponse, error)
	ListPresetStateIds(ctx context.Context, in *ListPresetStateIdsRequest, opts ...grpc.CallOption) (*ListPresetStateIdsResponse, error)
	ListPromptSetIds(ctx context.Context, in *ListPromptSetIdsRequest, opts ...grpc.CallOption) (*ListPromptSetIdsResponse, error)
	ListPromptSegmentSetIds(ctx context.Context, in *ListPromptSegmentSetIdsRequest, opts ...grpc.CallOption) (*ListPromptSegmentSetIdsResponse, error)
	ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResponse, error)
	ListPromptSegments(ctx context.Context, in *ListPromptSegmentsRequest, opts ...grpc.CallOption) (*ListPromptSegmentsResponse, error)
	ListActuationRules(ctx context.Context, in *ListActuationRuleRequest, opts ...grpc.CallOption) (*ListActuationRuleResponse, error)
	//  GetPersonality returns list of entire rules given a personality id (display these in a table by name)
	//  this also includes rule parts
	GetPersonality(ctx context.Context, in *GetPersonalityRequest, opts ...grpc.CallOption) (*GetPersonalityResponse, error)
	// Get emotional state returns emotional state object that also contains the emotional bounds
	GetEmotionalState(ctx context.Context, in *GetEmotionalStateRequest, opts ...grpc.CallOption) (*GetEmotionalStateResponse, error)
	// Gets generation config (not including prompt)
	GetGenerationConfig(ctx context.Context, in *GetGenConfigRequest, opts ...grpc.CallOption) (*GetGenConfigResponse, error)
	GetPrompt(ctx context.Context, in *GetPromptRequest, opts ...grpc.CallOption) (*GetPromptResponse, error)
	GetPromptSegment(ctx context.Context, in *GetPromptSegmentRequest, opts ...grpc.CallOption) (*GetPromptSegmentResponse, error)
	GetActuationRuleSet(ctx context.Context, in *GetActuationRuleSetRequest, opts ...grpc.CallOption) (*GetActuationRuleSetResponse, error)
	GetActuationRule(ctx context.Context, in *GetActuationRuleRequest, opts ...grpc.CallOption) (*GetActuationRuleResponse, error)
	GetPromptSet(ctx context.Context, in *GetPromptSetRequest, opts ...grpc.CallOption) (*GetPromptSetResponse, error)
	GetPromptSegmentSet(ctx context.Context, in *GetPromptSegmentSetRequest, opts ...grpc.CallOption) (*GetPromptSegmentSetResponse, error)
	// Create generation config
	CreateGenerationConfig(ctx context.Context, in *CreateGenerationConfigRequest, opts ...grpc.CallOption) (*CreateGenerationConfigResponse, error)
	CreatePrompt(ctx context.Context, in *CreatePromptRequest, opts ...grpc.CallOption) (*CreatePromptResponse, error)
	CreatePromptSegment(ctx context.Context, in *CreatePromptSegmentRequest, opts ...grpc.CallOption) (*CreatePromptSegmentResponse, error)
	// Create personality rules
	CreatePersonalityRule(ctx context.Context, in *CreatePersonalityRuleRequest, opts ...grpc.CallOption) (*CreatePersonalityRuleResponse, error)
	CreatePersonalityRulePart(ctx context.Context, in *CreatePersonalityRulePartRequest, opts ...grpc.CallOption) (*CreatePersonalityRulePartResponse, error)
	// Create emotional state
	CreatePresetState(ctx context.Context, in *CreatePresetStateRequest, opts ...grpc.CallOption) (*CreatePresetStateResponse, error)
	CreateEmotionalBound(ctx context.Context, in *CreateEmotionalBoundRequest, opts ...grpc.CallOption) (*CreateEmotionalBoundResponse, error)
	CreateActuationRuleSet(ctx context.Context, in *CreateActuationRuleSetRequest, opts ...grpc.CallOption) (*CreateActuationRuleSetResponse, error)
	CreateActuationRule(ctx context.Context, in *CreateActuationRuleRequest, opts ...grpc.CallOption) (*CreateActuationRuleResponse, error)
	// Update generation config
	UpdateGenerationConfig(ctx context.Context, in *UpdateGenerationConfigRequest, opts ...grpc.CallOption) (*UpdateGenerationConfigResponse, error)
	// Update personality rules
	UpdateEmotionalRule(ctx context.Context, in *UpdateEmotionalRuleRequest, opts ...grpc.CallOption) (*UpdateEmotionalRuleResponse, error)
	UpdateEmotionalRulePart(ctx context.Context, in *UpdateEmotionalRulePartRequest, opts ...grpc.CallOption) (*UpdateEmotionalRulePartResponse, error)
	// Update emotional state
	UpdateEmotionalState(ctx context.Context, in *UpdateEmotionalStateRequest, opts ...grpc.CallOption) (*UpdateEmotionalStateResponse, error)
	UpdateEmotionalBound(ctx context.Context, in *UpdateEmotionalBoundRequest, opts ...grpc.CallOption) (*UpdateEmotionalBoundResponse, error)
	UpdatePrompt(ctx context.Context, in *UpdatePromptRequest, opts ...grpc.CallOption) (*UpdatePromptResponse, error)
	UpdatePromptSegment(ctx context.Context, in *UpdatePromptSegmentRequest, opts ...grpc.CallOption) (*UpdatePromptSegmentResponse, error)
	UpdateActuationRule(ctx context.Context, in *UpdateActuationRuleRequest, opts ...grpc.CallOption) (*UpdateActuationRuleResponse, error)
	// Delete generation config
	DeleteGenerationConfig(ctx context.Context, in *DeleteGenerationConfigRequest, opts ...grpc.CallOption) (*DeleteGenerationConfigResponse, error)
	// Delete personality rules
	DeletePersonality(ctx context.Context, in *DeletePersonalityRequest, opts ...grpc.CallOption) (*DeletePersonalityResponse, error)
	DeletePersonalityRule(ctx context.Context, in *DeletePersonalityRuleRequest, opts ...grpc.CallOption) (*DeletePersonalityRuleResponse, error)
	DeletePersonalityRulePart(ctx context.Context, in *DeletePersonalityRulePartRequest, opts ...grpc.CallOption) (*DeletePersonalityRulePartResponse, error)
	// Delete emotional state
	DeleteEmotionalState(ctx context.Context, in *DeleteEmotionalStateRequest, opts ...grpc.CallOption) (*DeleteEmotionalStateResponse, error)
	DeleteEmotionalBound(ctx context.Context, in *DeleteEmotionalBoundRequest, opts ...grpc.CallOption) (*DeleteEmotionalBoundResponse, error)
	DeleteActuationRuleSet(ctx context.Context, in *DeleteActuationRuleSetRequest, opts ...grpc.CallOption) (*DeleteActuationRuleSetResponse, error)
	DeleteActuationRule(ctx context.Context, in *DeleteActuationRuleRequest, opts ...grpc.CallOption) (*DeleteActuationRuleResponse, error)
	// Delete prompt and segment
	DeletePrompt(ctx context.Context, in *DeletePromptRequest, opts ...grpc.CallOption) (*DeletePromptResponse, error)
	DeletePromptSegment(ctx context.Context, in *DeletePromptSegmentRequest, opts ...grpc.CallOption) (*DeletePromptSegmentResponse, error)
	// Delete whole prompt and prompt segment sets
	DeletePromptSet(ctx context.Context, in *DeletePromptSetRequest, opts ...grpc.CallOption) (*DeletePromptSetResponse, error)
	DeletePromptSegmentSet(ctx context.Context, in *DeletePromptSegmentSetRequest, opts ...grpc.CallOption) (*DeletePromptSegmentSetResponse, error)
}

type ruleApiClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleApiClient(cc grpc.ClientConnInterface) RuleApiClient {
	return &ruleApiClient{cc}
}

func (c *ruleApiClient) ListGenerationConfigs(ctx context.Context, in *ListGenerationConfigRequest, opts ...grpc.CallOption) (*ListGenerationConfigResponse, error) {
	out := new(ListGenerationConfigResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListGenerationConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) ListPersonalityIds(ctx context.Context, in *ListPersonalityIdsRequest, opts ...grpc.CallOption) (*ListPersonalityIdsResponse, error) {
	out := new(ListPersonalityIdsResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListPersonalityIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) ListPresetStateIds(ctx context.Context, in *ListPresetStateIdsRequest, opts ...grpc.CallOption) (*ListPresetStateIdsResponse, error) {
	out := new(ListPresetStateIdsResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListPresetStateIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) ListPromptSetIds(ctx context.Context, in *ListPromptSetIdsRequest, opts ...grpc.CallOption) (*ListPromptSetIdsResponse, error) {
	out := new(ListPromptSetIdsResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListPromptSetIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) ListPromptSegmentSetIds(ctx context.Context, in *ListPromptSegmentSetIdsRequest, opts ...grpc.CallOption) (*ListPromptSegmentSetIdsResponse, error) {
	out := new(ListPromptSegmentSetIdsResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListPromptSegmentSetIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResponse, error) {
	out := new(ListPromptsResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListPrompts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) ListPromptSegments(ctx context.Context, in *ListPromptSegmentsRequest, opts ...grpc.CallOption) (*ListPromptSegmentsResponse, error) {
	out := new(ListPromptSegmentsResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListPromptSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) ListActuationRules(ctx context.Context, in *ListActuationRuleRequest, opts ...grpc.CallOption) (*ListActuationRuleResponse, error) {
	out := new(ListActuationRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/ListActuationRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetPersonality(ctx context.Context, in *GetPersonalityRequest, opts ...grpc.CallOption) (*GetPersonalityResponse, error) {
	out := new(GetPersonalityResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetPersonality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetEmotionalState(ctx context.Context, in *GetEmotionalStateRequest, opts ...grpc.CallOption) (*GetEmotionalStateResponse, error) {
	out := new(GetEmotionalStateResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetEmotionalState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetGenerationConfig(ctx context.Context, in *GetGenConfigRequest, opts ...grpc.CallOption) (*GetGenConfigResponse, error) {
	out := new(GetGenConfigResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetGenerationConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetPrompt(ctx context.Context, in *GetPromptRequest, opts ...grpc.CallOption) (*GetPromptResponse, error) {
	out := new(GetPromptResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetPrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetPromptSegment(ctx context.Context, in *GetPromptSegmentRequest, opts ...grpc.CallOption) (*GetPromptSegmentResponse, error) {
	out := new(GetPromptSegmentResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetPromptSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetActuationRuleSet(ctx context.Context, in *GetActuationRuleSetRequest, opts ...grpc.CallOption) (*GetActuationRuleSetResponse, error) {
	out := new(GetActuationRuleSetResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetActuationRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetActuationRule(ctx context.Context, in *GetActuationRuleRequest, opts ...grpc.CallOption) (*GetActuationRuleResponse, error) {
	out := new(GetActuationRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetActuationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetPromptSet(ctx context.Context, in *GetPromptSetRequest, opts ...grpc.CallOption) (*GetPromptSetResponse, error) {
	out := new(GetPromptSetResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetPromptSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) GetPromptSegmentSet(ctx context.Context, in *GetPromptSegmentSetRequest, opts ...grpc.CallOption) (*GetPromptSegmentSetResponse, error) {
	out := new(GetPromptSegmentSetResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/GetPromptSegmentSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreateGenerationConfig(ctx context.Context, in *CreateGenerationConfigRequest, opts ...grpc.CallOption) (*CreateGenerationConfigResponse, error) {
	out := new(CreateGenerationConfigResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreateGenerationConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreatePrompt(ctx context.Context, in *CreatePromptRequest, opts ...grpc.CallOption) (*CreatePromptResponse, error) {
	out := new(CreatePromptResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreatePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreatePromptSegment(ctx context.Context, in *CreatePromptSegmentRequest, opts ...grpc.CallOption) (*CreatePromptSegmentResponse, error) {
	out := new(CreatePromptSegmentResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreatePromptSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreatePersonalityRule(ctx context.Context, in *CreatePersonalityRuleRequest, opts ...grpc.CallOption) (*CreatePersonalityRuleResponse, error) {
	out := new(CreatePersonalityRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreatePersonalityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreatePersonalityRulePart(ctx context.Context, in *CreatePersonalityRulePartRequest, opts ...grpc.CallOption) (*CreatePersonalityRulePartResponse, error) {
	out := new(CreatePersonalityRulePartResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreatePersonalityRulePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreatePresetState(ctx context.Context, in *CreatePresetStateRequest, opts ...grpc.CallOption) (*CreatePresetStateResponse, error) {
	out := new(CreatePresetStateResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreatePresetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreateEmotionalBound(ctx context.Context, in *CreateEmotionalBoundRequest, opts ...grpc.CallOption) (*CreateEmotionalBoundResponse, error) {
	out := new(CreateEmotionalBoundResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreateEmotionalBound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreateActuationRuleSet(ctx context.Context, in *CreateActuationRuleSetRequest, opts ...grpc.CallOption) (*CreateActuationRuleSetResponse, error) {
	out := new(CreateActuationRuleSetResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreateActuationRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) CreateActuationRule(ctx context.Context, in *CreateActuationRuleRequest, opts ...grpc.CallOption) (*CreateActuationRuleResponse, error) {
	out := new(CreateActuationRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/CreateActuationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdateGenerationConfig(ctx context.Context, in *UpdateGenerationConfigRequest, opts ...grpc.CallOption) (*UpdateGenerationConfigResponse, error) {
	out := new(UpdateGenerationConfigResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdateGenerationConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdateEmotionalRule(ctx context.Context, in *UpdateEmotionalRuleRequest, opts ...grpc.CallOption) (*UpdateEmotionalRuleResponse, error) {
	out := new(UpdateEmotionalRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdateEmotionalRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdateEmotionalRulePart(ctx context.Context, in *UpdateEmotionalRulePartRequest, opts ...grpc.CallOption) (*UpdateEmotionalRulePartResponse, error) {
	out := new(UpdateEmotionalRulePartResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdateEmotionalRulePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdateEmotionalState(ctx context.Context, in *UpdateEmotionalStateRequest, opts ...grpc.CallOption) (*UpdateEmotionalStateResponse, error) {
	out := new(UpdateEmotionalStateResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdateEmotionalState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdateEmotionalBound(ctx context.Context, in *UpdateEmotionalBoundRequest, opts ...grpc.CallOption) (*UpdateEmotionalBoundResponse, error) {
	out := new(UpdateEmotionalBoundResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdateEmotionalBound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdatePrompt(ctx context.Context, in *UpdatePromptRequest, opts ...grpc.CallOption) (*UpdatePromptResponse, error) {
	out := new(UpdatePromptResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdatePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdatePromptSegment(ctx context.Context, in *UpdatePromptSegmentRequest, opts ...grpc.CallOption) (*UpdatePromptSegmentResponse, error) {
	out := new(UpdatePromptSegmentResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdatePromptSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) UpdateActuationRule(ctx context.Context, in *UpdateActuationRuleRequest, opts ...grpc.CallOption) (*UpdateActuationRuleResponse, error) {
	out := new(UpdateActuationRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/UpdateActuationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeleteGenerationConfig(ctx context.Context, in *DeleteGenerationConfigRequest, opts ...grpc.CallOption) (*DeleteGenerationConfigResponse, error) {
	out := new(DeleteGenerationConfigResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeleteGenerationConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeletePersonality(ctx context.Context, in *DeletePersonalityRequest, opts ...grpc.CallOption) (*DeletePersonalityResponse, error) {
	out := new(DeletePersonalityResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeletePersonality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeletePersonalityRule(ctx context.Context, in *DeletePersonalityRuleRequest, opts ...grpc.CallOption) (*DeletePersonalityRuleResponse, error) {
	out := new(DeletePersonalityRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeletePersonalityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeletePersonalityRulePart(ctx context.Context, in *DeletePersonalityRulePartRequest, opts ...grpc.CallOption) (*DeletePersonalityRulePartResponse, error) {
	out := new(DeletePersonalityRulePartResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeletePersonalityRulePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeleteEmotionalState(ctx context.Context, in *DeleteEmotionalStateRequest, opts ...grpc.CallOption) (*DeleteEmotionalStateResponse, error) {
	out := new(DeleteEmotionalStateResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeleteEmotionalState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeleteEmotionalBound(ctx context.Context, in *DeleteEmotionalBoundRequest, opts ...grpc.CallOption) (*DeleteEmotionalBoundResponse, error) {
	out := new(DeleteEmotionalBoundResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeleteEmotionalBound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeleteActuationRuleSet(ctx context.Context, in *DeleteActuationRuleSetRequest, opts ...grpc.CallOption) (*DeleteActuationRuleSetResponse, error) {
	out := new(DeleteActuationRuleSetResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeleteActuationRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeleteActuationRule(ctx context.Context, in *DeleteActuationRuleRequest, opts ...grpc.CallOption) (*DeleteActuationRuleResponse, error) {
	out := new(DeleteActuationRuleResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeleteActuationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeletePrompt(ctx context.Context, in *DeletePromptRequest, opts ...grpc.CallOption) (*DeletePromptResponse, error) {
	out := new(DeletePromptResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeletePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeletePromptSegment(ctx context.Context, in *DeletePromptSegmentRequest, opts ...grpc.CallOption) (*DeletePromptSegmentResponse, error) {
	out := new(DeletePromptSegmentResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeletePromptSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeletePromptSet(ctx context.Context, in *DeletePromptSetRequest, opts ...grpc.CallOption) (*DeletePromptSetResponse, error) {
	out := new(DeletePromptSetResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeletePromptSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleApiClient) DeletePromptSegmentSet(ctx context.Context, in *DeletePromptSegmentSetRequest, opts ...grpc.CallOption) (*DeletePromptSegmentSetResponse, error) {
	out := new(DeletePromptSegmentSetResponse)
	err := c.cc.Invoke(ctx, "/rule_api.RuleApi/DeletePromptSegmentSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleApiServer is the server API for RuleApi service.
// All implementations must embed UnimplementedRuleApiServer
// for forward compatibility
type RuleApiServer interface {
	// Listing (gives ids only, no need to read entire database)
	ListGenerationConfigs(context.Context, *ListGenerationConfigRequest) (*ListGenerationConfigResponse, error)
	ListPersonalityIds(context.Context, *ListPersonalityIdsRequest) (*ListPersonalityIdsResponse, error)
	ListPresetStateIds(context.Context, *ListPresetStateIdsRequest) (*ListPresetStateIdsResponse, error)
	ListPromptSetIds(context.Context, *ListPromptSetIdsRequest) (*ListPromptSetIdsResponse, error)
	ListPromptSegmentSetIds(context.Context, *ListPromptSegmentSetIdsRequest) (*ListPromptSegmentSetIdsResponse, error)
	ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResponse, error)
	ListPromptSegments(context.Context, *ListPromptSegmentsRequest) (*ListPromptSegmentsResponse, error)
	ListActuationRules(context.Context, *ListActuationRuleRequest) (*ListActuationRuleResponse, error)
	//  GetPersonality returns list of entire rules given a personality id (display these in a table by name)
	//  this also includes rule parts
	GetPersonality(context.Context, *GetPersonalityRequest) (*GetPersonalityResponse, error)
	// Get emotional state returns emotional state object that also contains the emotional bounds
	GetEmotionalState(context.Context, *GetEmotionalStateRequest) (*GetEmotionalStateResponse, error)
	// Gets generation config (not including prompt)
	GetGenerationConfig(context.Context, *GetGenConfigRequest) (*GetGenConfigResponse, error)
	GetPrompt(context.Context, *GetPromptRequest) (*GetPromptResponse, error)
	GetPromptSegment(context.Context, *GetPromptSegmentRequest) (*GetPromptSegmentResponse, error)
	GetActuationRuleSet(context.Context, *GetActuationRuleSetRequest) (*GetActuationRuleSetResponse, error)
	GetActuationRule(context.Context, *GetActuationRuleRequest) (*GetActuationRuleResponse, error)
	GetPromptSet(context.Context, *GetPromptSetRequest) (*GetPromptSetResponse, error)
	GetPromptSegmentSet(context.Context, *GetPromptSegmentSetRequest) (*GetPromptSegmentSetResponse, error)
	// Create generation config
	CreateGenerationConfig(context.Context, *CreateGenerationConfigRequest) (*CreateGenerationConfigResponse, error)
	CreatePrompt(context.Context, *CreatePromptRequest) (*CreatePromptResponse, error)
	CreatePromptSegment(context.Context, *CreatePromptSegmentRequest) (*CreatePromptSegmentResponse, error)
	// Create personality rules
	CreatePersonalityRule(context.Context, *CreatePersonalityRuleRequest) (*CreatePersonalityRuleResponse, error)
	CreatePersonalityRulePart(context.Context, *CreatePersonalityRulePartRequest) (*CreatePersonalityRulePartResponse, error)
	// Create emotional state
	CreatePresetState(context.Context, *CreatePresetStateRequest) (*CreatePresetStateResponse, error)
	CreateEmotionalBound(context.Context, *CreateEmotionalBoundRequest) (*CreateEmotionalBoundResponse, error)
	CreateActuationRuleSet(context.Context, *CreateActuationRuleSetRequest) (*CreateActuationRuleSetResponse, error)
	CreateActuationRule(context.Context, *CreateActuationRuleRequest) (*CreateActuationRuleResponse, error)
	// Update generation config
	UpdateGenerationConfig(context.Context, *UpdateGenerationConfigRequest) (*UpdateGenerationConfigResponse, error)
	// Update personality rules
	UpdateEmotionalRule(context.Context, *UpdateEmotionalRuleRequest) (*UpdateEmotionalRuleResponse, error)
	UpdateEmotionalRulePart(context.Context, *UpdateEmotionalRulePartRequest) (*UpdateEmotionalRulePartResponse, error)
	// Update emotional state
	UpdateEmotionalState(context.Context, *UpdateEmotionalStateRequest) (*UpdateEmotionalStateResponse, error)
	UpdateEmotionalBound(context.Context, *UpdateEmotionalBoundRequest) (*UpdateEmotionalBoundResponse, error)
	UpdatePrompt(context.Context, *UpdatePromptRequest) (*UpdatePromptResponse, error)
	UpdatePromptSegment(context.Context, *UpdatePromptSegmentRequest) (*UpdatePromptSegmentResponse, error)
	UpdateActuationRule(context.Context, *UpdateActuationRuleRequest) (*UpdateActuationRuleResponse, error)
	// Delete generation config
	DeleteGenerationConfig(context.Context, *DeleteGenerationConfigRequest) (*DeleteGenerationConfigResponse, error)
	// Delete personality rules
	DeletePersonality(context.Context, *DeletePersonalityRequest) (*DeletePersonalityResponse, error)
	DeletePersonalityRule(context.Context, *DeletePersonalityRuleRequest) (*DeletePersonalityRuleResponse, error)
	DeletePersonalityRulePart(context.Context, *DeletePersonalityRulePartRequest) (*DeletePersonalityRulePartResponse, error)
	// Delete emotional state
	DeleteEmotionalState(context.Context, *DeleteEmotionalStateRequest) (*DeleteEmotionalStateResponse, error)
	DeleteEmotionalBound(context.Context, *DeleteEmotionalBoundRequest) (*DeleteEmotionalBoundResponse, error)
	DeleteActuationRuleSet(context.Context, *DeleteActuationRuleSetRequest) (*DeleteActuationRuleSetResponse, error)
	DeleteActuationRule(context.Context, *DeleteActuationRuleRequest) (*DeleteActuationRuleResponse, error)
	// Delete prompt and segment
	DeletePrompt(context.Context, *DeletePromptRequest) (*DeletePromptResponse, error)
	DeletePromptSegment(context.Context, *DeletePromptSegmentRequest) (*DeletePromptSegmentResponse, error)
	// Delete whole prompt and prompt segment sets
	DeletePromptSet(context.Context, *DeletePromptSetRequest) (*DeletePromptSetResponse, error)
	DeletePromptSegmentSet(context.Context, *DeletePromptSegmentSetRequest) (*DeletePromptSegmentSetResponse, error)
	mustEmbedUnimplementedRuleApiServer()
}

// UnimplementedRuleApiServer must be embedded to have forward compatible implementations.
type UnimplementedRuleApiServer struct {
}

func (UnimplementedRuleApiServer) ListGenerationConfigs(context.Context, *ListGenerationConfigRequest) (*ListGenerationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenerationConfigs not implemented")
}
func (UnimplementedRuleApiServer) ListPersonalityIds(context.Context, *ListPersonalityIdsRequest) (*ListPersonalityIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonalityIds not implemented")
}
func (UnimplementedRuleApiServer) ListPresetStateIds(context.Context, *ListPresetStateIdsRequest) (*ListPresetStateIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPresetStateIds not implemented")
}
func (UnimplementedRuleApiServer) ListPromptSetIds(context.Context, *ListPromptSetIdsRequest) (*ListPromptSetIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromptSetIds not implemented")
}
func (UnimplementedRuleApiServer) ListPromptSegmentSetIds(context.Context, *ListPromptSegmentSetIdsRequest) (*ListPromptSegmentSetIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromptSegmentSetIds not implemented")
}
func (UnimplementedRuleApiServer) ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrompts not implemented")
}
func (UnimplementedRuleApiServer) ListPromptSegments(context.Context, *ListPromptSegmentsRequest) (*ListPromptSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromptSegments not implemented")
}
func (UnimplementedRuleApiServer) ListActuationRules(context.Context, *ListActuationRuleRequest) (*ListActuationRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActuationRules not implemented")
}
func (UnimplementedRuleApiServer) GetPersonality(context.Context, *GetPersonalityRequest) (*GetPersonalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonality not implemented")
}
func (UnimplementedRuleApiServer) GetEmotionalState(context.Context, *GetEmotionalStateRequest) (*GetEmotionalStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmotionalState not implemented")
}
func (UnimplementedRuleApiServer) GetGenerationConfig(context.Context, *GetGenConfigRequest) (*GetGenConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenerationConfig not implemented")
}
func (UnimplementedRuleApiServer) GetPrompt(context.Context, *GetPromptRequest) (*GetPromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompt not implemented")
}
func (UnimplementedRuleApiServer) GetPromptSegment(context.Context, *GetPromptSegmentRequest) (*GetPromptSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromptSegment not implemented")
}
func (UnimplementedRuleApiServer) GetActuationRuleSet(context.Context, *GetActuationRuleSetRequest) (*GetActuationRuleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActuationRuleSet not implemented")
}
func (UnimplementedRuleApiServer) GetActuationRule(context.Context, *GetActuationRuleRequest) (*GetActuationRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActuationRule not implemented")
}
func (UnimplementedRuleApiServer) GetPromptSet(context.Context, *GetPromptSetRequest) (*GetPromptSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromptSet not implemented")
}
func (UnimplementedRuleApiServer) GetPromptSegmentSet(context.Context, *GetPromptSegmentSetRequest) (*GetPromptSegmentSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromptSegmentSet not implemented")
}
func (UnimplementedRuleApiServer) CreateGenerationConfig(context.Context, *CreateGenerationConfigRequest) (*CreateGenerationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenerationConfig not implemented")
}
func (UnimplementedRuleApiServer) CreatePrompt(context.Context, *CreatePromptRequest) (*CreatePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrompt not implemented")
}
func (UnimplementedRuleApiServer) CreatePromptSegment(context.Context, *CreatePromptSegmentRequest) (*CreatePromptSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromptSegment not implemented")
}
func (UnimplementedRuleApiServer) CreatePersonalityRule(context.Context, *CreatePersonalityRuleRequest) (*CreatePersonalityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonalityRule not implemented")
}
func (UnimplementedRuleApiServer) CreatePersonalityRulePart(context.Context, *CreatePersonalityRulePartRequest) (*CreatePersonalityRulePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonalityRulePart not implemented")
}
func (UnimplementedRuleApiServer) CreatePresetState(context.Context, *CreatePresetStateRequest) (*CreatePresetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePresetState not implemented")
}
func (UnimplementedRuleApiServer) CreateEmotionalBound(context.Context, *CreateEmotionalBoundRequest) (*CreateEmotionalBoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmotionalBound not implemented")
}
func (UnimplementedRuleApiServer) CreateActuationRuleSet(context.Context, *CreateActuationRuleSetRequest) (*CreateActuationRuleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActuationRuleSet not implemented")
}
func (UnimplementedRuleApiServer) CreateActuationRule(context.Context, *CreateActuationRuleRequest) (*CreateActuationRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActuationRule not implemented")
}
func (UnimplementedRuleApiServer) UpdateGenerationConfig(context.Context, *UpdateGenerationConfigRequest) (*UpdateGenerationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenerationConfig not implemented")
}
func (UnimplementedRuleApiServer) UpdateEmotionalRule(context.Context, *UpdateEmotionalRuleRequest) (*UpdateEmotionalRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmotionalRule not implemented")
}
func (UnimplementedRuleApiServer) UpdateEmotionalRulePart(context.Context, *UpdateEmotionalRulePartRequest) (*UpdateEmotionalRulePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmotionalRulePart not implemented")
}
func (UnimplementedRuleApiServer) UpdateEmotionalState(context.Context, *UpdateEmotionalStateRequest) (*UpdateEmotionalStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmotionalState not implemented")
}
func (UnimplementedRuleApiServer) UpdateEmotionalBound(context.Context, *UpdateEmotionalBoundRequest) (*UpdateEmotionalBoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmotionalBound not implemented")
}
func (UnimplementedRuleApiServer) UpdatePrompt(context.Context, *UpdatePromptRequest) (*UpdatePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrompt not implemented")
}
func (UnimplementedRuleApiServer) UpdatePromptSegment(context.Context, *UpdatePromptSegmentRequest) (*UpdatePromptSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromptSegment not implemented")
}
func (UnimplementedRuleApiServer) UpdateActuationRule(context.Context, *UpdateActuationRuleRequest) (*UpdateActuationRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActuationRule not implemented")
}
func (UnimplementedRuleApiServer) DeleteGenerationConfig(context.Context, *DeleteGenerationConfigRequest) (*DeleteGenerationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenerationConfig not implemented")
}
func (UnimplementedRuleApiServer) DeletePersonality(context.Context, *DeletePersonalityRequest) (*DeletePersonalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonality not implemented")
}
func (UnimplementedRuleApiServer) DeletePersonalityRule(context.Context, *DeletePersonalityRuleRequest) (*DeletePersonalityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonalityRule not implemented")
}
func (UnimplementedRuleApiServer) DeletePersonalityRulePart(context.Context, *DeletePersonalityRulePartRequest) (*DeletePersonalityRulePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonalityRulePart not implemented")
}
func (UnimplementedRuleApiServer) DeleteEmotionalState(context.Context, *DeleteEmotionalStateRequest) (*DeleteEmotionalStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmotionalState not implemented")
}
func (UnimplementedRuleApiServer) DeleteEmotionalBound(context.Context, *DeleteEmotionalBoundRequest) (*DeleteEmotionalBoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmotionalBound not implemented")
}
func (UnimplementedRuleApiServer) DeleteActuationRuleSet(context.Context, *DeleteActuationRuleSetRequest) (*DeleteActuationRuleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActuationRuleSet not implemented")
}
func (UnimplementedRuleApiServer) DeleteActuationRule(context.Context, *DeleteActuationRuleRequest) (*DeleteActuationRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActuationRule not implemented")
}
func (UnimplementedRuleApiServer) DeletePrompt(context.Context, *DeletePromptRequest) (*DeletePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrompt not implemented")
}
func (UnimplementedRuleApiServer) DeletePromptSegment(context.Context, *DeletePromptSegmentRequest) (*DeletePromptSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePromptSegment not implemented")
}
func (UnimplementedRuleApiServer) DeletePromptSet(context.Context, *DeletePromptSetRequest) (*DeletePromptSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePromptSet not implemented")
}
func (UnimplementedRuleApiServer) DeletePromptSegmentSet(context.Context, *DeletePromptSegmentSetRequest) (*DeletePromptSegmentSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePromptSegmentSet not implemented")
}
func (UnimplementedRuleApiServer) mustEmbedUnimplementedRuleApiServer() {}

// UnsafeRuleApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleApiServer will
// result in compilation errors.
type UnsafeRuleApiServer interface {
	mustEmbedUnimplementedRuleApiServer()
}

func RegisterRuleApiServer(s grpc.ServiceRegistrar, srv RuleApiServer) {
	s.RegisterService(&RuleApi_ServiceDesc, srv)
}

func _RuleApi_ListGenerationConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGenerationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListGenerationConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListGenerationConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListGenerationConfigs(ctx, req.(*ListGenerationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_ListPersonalityIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalityIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListPersonalityIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListPersonalityIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListPersonalityIds(ctx, req.(*ListPersonalityIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_ListPresetStateIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPresetStateIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListPresetStateIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListPresetStateIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListPresetStateIds(ctx, req.(*ListPresetStateIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_ListPromptSetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromptSetIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListPromptSetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListPromptSetIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListPromptSetIds(ctx, req.(*ListPromptSetIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_ListPromptSegmentSetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromptSegmentSetIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListPromptSegmentSetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListPromptSegmentSetIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListPromptSegmentSetIds(ctx, req.(*ListPromptSegmentSetIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_ListPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListPrompts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListPrompts(ctx, req.(*ListPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_ListPromptSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromptSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListPromptSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListPromptSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListPromptSegments(ctx, req.(*ListPromptSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_ListActuationRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActuationRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).ListActuationRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/ListActuationRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).ListActuationRules(ctx, req.(*ListActuationRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetPersonality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetPersonality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetPersonality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetPersonality(ctx, req.(*GetPersonalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetEmotionalState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmotionalStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetEmotionalState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetEmotionalState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetEmotionalState(ctx, req.(*GetEmotionalStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetGenerationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetGenerationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetGenerationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetGenerationConfig(ctx, req.(*GetGenConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetPrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetPrompt(ctx, req.(*GetPromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetPromptSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromptSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetPromptSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetPromptSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetPromptSegment(ctx, req.(*GetPromptSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetActuationRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActuationRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetActuationRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetActuationRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetActuationRuleSet(ctx, req.(*GetActuationRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetActuationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActuationRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetActuationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetActuationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetActuationRule(ctx, req.(*GetActuationRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetPromptSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromptSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetPromptSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetPromptSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetPromptSet(ctx, req.(*GetPromptSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_GetPromptSegmentSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromptSegmentSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).GetPromptSegmentSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/GetPromptSegmentSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).GetPromptSegmentSet(ctx, req.(*GetPromptSegmentSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreateGenerationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenerationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreateGenerationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreateGenerationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreateGenerationConfig(ctx, req.(*CreateGenerationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreatePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreatePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreatePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreatePrompt(ctx, req.(*CreatePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreatePromptSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromptSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreatePromptSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreatePromptSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreatePromptSegment(ctx, req.(*CreatePromptSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreatePersonalityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonalityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreatePersonalityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreatePersonalityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreatePersonalityRule(ctx, req.(*CreatePersonalityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreatePersonalityRulePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonalityRulePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreatePersonalityRulePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreatePersonalityRulePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreatePersonalityRulePart(ctx, req.(*CreatePersonalityRulePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreatePresetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePresetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreatePresetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreatePresetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreatePresetState(ctx, req.(*CreatePresetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreateEmotionalBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmotionalBoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreateEmotionalBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreateEmotionalBound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreateEmotionalBound(ctx, req.(*CreateEmotionalBoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreateActuationRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActuationRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreateActuationRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreateActuationRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreateActuationRuleSet(ctx, req.(*CreateActuationRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_CreateActuationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActuationRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).CreateActuationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/CreateActuationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).CreateActuationRule(ctx, req.(*CreateActuationRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdateGenerationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenerationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdateGenerationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdateGenerationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdateGenerationConfig(ctx, req.(*UpdateGenerationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdateEmotionalRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmotionalRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdateEmotionalRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdateEmotionalRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdateEmotionalRule(ctx, req.(*UpdateEmotionalRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdateEmotionalRulePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmotionalRulePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdateEmotionalRulePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdateEmotionalRulePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdateEmotionalRulePart(ctx, req.(*UpdateEmotionalRulePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdateEmotionalState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmotionalStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdateEmotionalState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdateEmotionalState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdateEmotionalState(ctx, req.(*UpdateEmotionalStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdateEmotionalBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmotionalBoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdateEmotionalBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdateEmotionalBound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdateEmotionalBound(ctx, req.(*UpdateEmotionalBoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdatePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdatePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdatePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdatePrompt(ctx, req.(*UpdatePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdatePromptSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromptSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdatePromptSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdatePromptSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdatePromptSegment(ctx, req.(*UpdatePromptSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_UpdateActuationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActuationRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).UpdateActuationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/UpdateActuationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).UpdateActuationRule(ctx, req.(*UpdateActuationRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeleteGenerationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenerationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeleteGenerationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeleteGenerationConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeleteGenerationConfig(ctx, req.(*DeleteGenerationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeletePersonality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeletePersonality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeletePersonality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeletePersonality(ctx, req.(*DeletePersonalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeletePersonalityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeletePersonalityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeletePersonalityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeletePersonalityRule(ctx, req.(*DeletePersonalityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeletePersonalityRulePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalityRulePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeletePersonalityRulePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeletePersonalityRulePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeletePersonalityRulePart(ctx, req.(*DeletePersonalityRulePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeleteEmotionalState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmotionalStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeleteEmotionalState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeleteEmotionalState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeleteEmotionalState(ctx, req.(*DeleteEmotionalStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeleteEmotionalBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmotionalBoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeleteEmotionalBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeleteEmotionalBound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeleteEmotionalBound(ctx, req.(*DeleteEmotionalBoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeleteActuationRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActuationRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeleteActuationRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeleteActuationRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeleteActuationRuleSet(ctx, req.(*DeleteActuationRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeleteActuationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActuationRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeleteActuationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeleteActuationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeleteActuationRule(ctx, req.(*DeleteActuationRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeletePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeletePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeletePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeletePrompt(ctx, req.(*DeletePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeletePromptSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePromptSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeletePromptSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeletePromptSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeletePromptSegment(ctx, req.(*DeletePromptSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeletePromptSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePromptSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeletePromptSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeletePromptSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeletePromptSet(ctx, req.(*DeletePromptSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleApi_DeletePromptSegmentSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePromptSegmentSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleApiServer).DeletePromptSegmentSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rule_api.RuleApi/DeletePromptSegmentSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleApiServer).DeletePromptSegmentSet(ctx, req.(*DeletePromptSegmentSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleApi_ServiceDesc is the grpc.ServiceDesc for RuleApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rule_api.RuleApi",
	HandlerType: (*RuleApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGenerationConfigs",
			Handler:    _RuleApi_ListGenerationConfigs_Handler,
		},
		{
			MethodName: "ListPersonalityIds",
			Handler:    _RuleApi_ListPersonalityIds_Handler,
		},
		{
			MethodName: "ListPresetStateIds",
			Handler:    _RuleApi_ListPresetStateIds_Handler,
		},
		{
			MethodName: "ListPromptSetIds",
			Handler:    _RuleApi_ListPromptSetIds_Handler,
		},
		{
			MethodName: "ListPromptSegmentSetIds",
			Handler:    _RuleApi_ListPromptSegmentSetIds_Handler,
		},
		{
			MethodName: "ListPrompts",
			Handler:    _RuleApi_ListPrompts_Handler,
		},
		{
			MethodName: "ListPromptSegments",
			Handler:    _RuleApi_ListPromptSegments_Handler,
		},
		{
			MethodName: "ListActuationRules",
			Handler:    _RuleApi_ListActuationRules_Handler,
		},
		{
			MethodName: "GetPersonality",
			Handler:    _RuleApi_GetPersonality_Handler,
		},
		{
			MethodName: "GetEmotionalState",
			Handler:    _RuleApi_GetEmotionalState_Handler,
		},
		{
			MethodName: "GetGenerationConfig",
			Handler:    _RuleApi_GetGenerationConfig_Handler,
		},
		{
			MethodName: "GetPrompt",
			Handler:    _RuleApi_GetPrompt_Handler,
		},
		{
			MethodName: "GetPromptSegment",
			Handler:    _RuleApi_GetPromptSegment_Handler,
		},
		{
			MethodName: "GetActuationRuleSet",
			Handler:    _RuleApi_GetActuationRuleSet_Handler,
		},
		{
			MethodName: "GetActuationRule",
			Handler:    _RuleApi_GetActuationRule_Handler,
		},
		{
			MethodName: "GetPromptSet",
			Handler:    _RuleApi_GetPromptSet_Handler,
		},
		{
			MethodName: "GetPromptSegmentSet",
			Handler:    _RuleApi_GetPromptSegmentSet_Handler,
		},
		{
			MethodName: "CreateGenerationConfig",
			Handler:    _RuleApi_CreateGenerationConfig_Handler,
		},
		{
			MethodName: "CreatePrompt",
			Handler:    _RuleApi_CreatePrompt_Handler,
		},
		{
			MethodName: "CreatePromptSegment",
			Handler:    _RuleApi_CreatePromptSegment_Handler,
		},
		{
			MethodName: "CreatePersonalityRule",
			Handler:    _RuleApi_CreatePersonalityRule_Handler,
		},
		{
			MethodName: "CreatePersonalityRulePart",
			Handler:    _RuleApi_CreatePersonalityRulePart_Handler,
		},
		{
			MethodName: "CreatePresetState",
			Handler:    _RuleApi_CreatePresetState_Handler,
		},
		{
			MethodName: "CreateEmotionalBound",
			Handler:    _RuleApi_CreateEmotionalBound_Handler,
		},
		{
			MethodName: "CreateActuationRuleSet",
			Handler:    _RuleApi_CreateActuationRuleSet_Handler,
		},
		{
			MethodName: "CreateActuationRule",
			Handler:    _RuleApi_CreateActuationRule_Handler,
		},
		{
			MethodName: "UpdateGenerationConfig",
			Handler:    _RuleApi_UpdateGenerationConfig_Handler,
		},
		{
			MethodName: "UpdateEmotionalRule",
			Handler:    _RuleApi_UpdateEmotionalRule_Handler,
		},
		{
			MethodName: "UpdateEmotionalRulePart",
			Handler:    _RuleApi_UpdateEmotionalRulePart_Handler,
		},
		{
			MethodName: "UpdateEmotionalState",
			Handler:    _RuleApi_UpdateEmotionalState_Handler,
		},
		{
			MethodName: "UpdateEmotionalBound",
			Handler:    _RuleApi_UpdateEmotionalBound_Handler,
		},
		{
			MethodName: "UpdatePrompt",
			Handler:    _RuleApi_UpdatePrompt_Handler,
		},
		{
			MethodName: "UpdatePromptSegment",
			Handler:    _RuleApi_UpdatePromptSegment_Handler,
		},
		{
			MethodName: "UpdateActuationRule",
			Handler:    _RuleApi_UpdateActuationRule_Handler,
		},
		{
			MethodName: "DeleteGenerationConfig",
			Handler:    _RuleApi_DeleteGenerationConfig_Handler,
		},
		{
			MethodName: "DeletePersonality",
			Handler:    _RuleApi_DeletePersonality_Handler,
		},
		{
			MethodName: "DeletePersonalityRule",
			Handler:    _RuleApi_DeletePersonalityRule_Handler,
		},
		{
			MethodName: "DeletePersonalityRulePart",
			Handler:    _RuleApi_DeletePersonalityRulePart_Handler,
		},
		{
			MethodName: "DeleteEmotionalState",
			Handler:    _RuleApi_DeleteEmotionalState_Handler,
		},
		{
			MethodName: "DeleteEmotionalBound",
			Handler:    _RuleApi_DeleteEmotionalBound_Handler,
		},
		{
			MethodName: "DeleteActuationRuleSet",
			Handler:    _RuleApi_DeleteActuationRuleSet_Handler,
		},
		{
			MethodName: "DeleteActuationRule",
			Handler:    _RuleApi_DeleteActuationRule_Handler,
		},
		{
			MethodName: "DeletePrompt",
			Handler:    _RuleApi_DeletePrompt_Handler,
		},
		{
			MethodName: "DeletePromptSegment",
			Handler:    _RuleApi_DeletePromptSegment_Handler,
		},
		{
			MethodName: "DeletePromptSet",
			Handler:    _RuleApi_DeletePromptSet_Handler,
		},
		{
			MethodName: "DeletePromptSegmentSet",
			Handler:    _RuleApi_DeletePromptSegmentSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rule_api.proto",
}
